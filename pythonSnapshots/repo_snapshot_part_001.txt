# Repo snapshot generated by gather_repo_snapshot.py
# Path: /Users/wish/Documents/DailyCodes/playwave.store/partywave
# Files collected: 29

>>> FILE: README.md (size: 10 bytes)
--- BEGIN FILE ---
partywave

--- END FILE ---

>>> FILE: app.json (size: 563 bytes)
--- BEGIN FILE ---
{
  "expo": {
    "name": "bolt-expo-nativewind",
    "slug": "bolt-expo-nativewind",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "myapp",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "ios": {
      "supportsTablet": true
    },
    "web": {
      "bundler": "metro",
      "output": "single",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": ["expo-router", "expo-font", "expo-web-browser"],
    "experiments": {
      "typedRoutes": true
    }
  }
}

--- END FILE ---

>>> FILE: app/(tabs)/_layout.tsx (size: 1417 bytes)
--- BEGIN FILE ---
import { Tabs } from 'expo-router';
import { Chrome as Home, Users, BookOpen, Trophy } from 'lucide-react-native';
import { useTheme } from '@/hooks/useTheme';

export default function TabLayout() {
  const { colors } = useTheme();

  return (
    <Tabs
      screenOptions={{
        headerShown: false,
        tabBarStyle: {
          backgroundColor: colors.surface,
          borderTopColor: colors.border,
        },
        tabBarActiveTintColor: colors.primary,
        tabBarInactiveTintColor: colors.textSecondary,
      }}>
      <Tabs.Screen
        name="index"
        options={{
          title: 'Home',
          tabBarIcon: ({ size, color }) => (
            <Home size={size} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="game"
        options={{
          title: 'Game',
          tabBarIcon: ({ size, color }) => (
            <Users size={size} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="leaderboard"
        options={{
          title: 'Scores',
          tabBarIcon: ({ size, color }) => (
            <Trophy size={size} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="word-libraries"
        options={{
          title: 'Libraries',
          tabBarIcon: ({ size, color }) => (
            <BookOpen size={size} color={color} />
          ),
        }}
      />
    </Tabs>
  );
}

--- END FILE ---

>>> FILE: app/(tabs)/game.tsx (size: 22852 bytes)
--- BEGIN FILE ---
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Modal, Alert } from 'react-native';
import { useState, useEffect } from 'react';
import { Plus, Minus, Play, ArrowLeft, Users, X, Settings, ToggleLeft, ToggleRight, Crown, Zap } from 'lucide-react-native';
import { router } from 'expo-router';
import { GameService } from '@/services/gameService';
import { useLeaderboard } from '@/hooks/useGameData';
import { SpecialRole } from '@/types/game';
import { AceternityCard } from '@/components/ui/aceternity-card';
import { AceternityButton } from '@/components/ui/aceternity-button';
import { ThemeToggle } from '@/components/ui/theme-toggle';
import { useTheme } from '@/hooks/useTheme';
import { ModernInput } from '@/components/ui/modern-input';
import { ModernBadge } from '@/components/ui/modern-badge';
import { LinearGradient } from 'expo-linear-gradient';

export default function GameSetupScreen() {
  const { theme, colors } = useTheme();
  const { topPlayers, loading: leaderboardLoading } = useLeaderboard();
  const [playerCount, setPlayerCount] = useState(6);
  const [gameName, setGameName] = useState('');
  const [showPlayerNamesModal, setShowPlayerNamesModal] = useState(false);
  const [showSpecialRolesModal, setShowSpecialRolesModal] = useState(false);
  const [playerNames, setPlayerNames] = useState<string[]>([]);
  const [isCreatingGame, setIsCreatingGame] = useState(false);
  const [useSpecialRoles, setUseSpecialRoles] = useState(false);
  const [selectedSpecialRoles, setSelectedSpecialRoles] = useState<SpecialRole[]>([]);
  const [customRoles, setCustomRoles] = useState<{
    civilians: number;
    undercover: number;
    mrWhite: number;
  } | null>(null);

  const availableSpecialRoles: SpecialRole[] = [
    'goddess-of-justice',
    'lovers', 
    'mr-meme',
    'revenger',
    'ghost',
    'joy-fool'
  ];

  useEffect(() => {
    const newNames = Array(playerCount).fill('');
    setPlayerNames(newNames);
  }, [playerCount]);

  const toggleSpecialRole = (role: SpecialRole) => {
    setSelectedSpecialRoles(prev => {
      if (prev.includes(role)) {
        return prev.filter(r => r !== role);
      } else {
        if (prev.length >= Math.floor(playerCount / 2)) {
          Alert.alert('Too Many Special Roles', 'You can only have up to half the players with special roles.');
          return prev;
        }
        return [...prev, role];
      }
    });
  };

  const updatePlayerCount = (count: number) => {
    const newCount = Math.max(3, Math.min(20, count));
    setPlayerCount(newCount);
    setCustomRoles(null);
    if (selectedSpecialRoles.length > Math.floor(newCount / 2)) {
      setSelectedSpecialRoles([]);
    }
  };

  const updatePlayerName = (index: number, name: string) => {
    const newNames = [...playerNames];
    newNames[index] = name;
    setPlayerNames(newNames);
  };

  const updateRoleCount = (role: 'undercover' | 'mrWhite', delta: number) => {
    const currentRoles = customRoles || GameService.getRoleDistribution(playerCount);
    const newRoles = { ...currentRoles };
    
    if (role === 'undercover') {
      newRoles.undercover = Math.max(0, Math.min(playerCount - 1, newRoles.undercover + delta));
    } else {
      newRoles.mrWhite = Math.max(0, Math.min(1, newRoles.mrWhite + delta));
    }
    
    newRoles.civilians = playerCount - newRoles.undercover - newRoles.mrWhite;
    
    if (newRoles.civilians < 1) {
      if (role === 'undercover') {
        newRoles.undercover = Math.max(0, newRoles.undercover - 1);
      } else {
        newRoles.mrWhite = 0;
      }
      newRoles.civilians = playerCount - newRoles.undercover - newRoles.mrWhite;
    }
    
    setCustomRoles(newRoles);
  };

  const startGameSetup = () => {
    if (!gameName.trim()) {
      Alert.alert('Missing Game Name', 'Please enter a name for this game session.');
      return;
    }
    setShowPlayerNamesModal(true);
  };

  const startGame = async () => {
    const hasEmptyNames = playerNames.some(name => name.trim() === '');
    if (hasEmptyNames) {
      Alert.alert('Missing Names', 'Please enter names for all players before starting the game.');
      return;
    }

    const uniqueNames = new Set(playerNames.map(name => name.trim().toLowerCase()));
    if (uniqueNames.size !== playerNames.length) {
      Alert.alert('Duplicate Names', 'Please ensure all player names are unique.');
      return;
    }

    try {
      setIsCreatingGame(true);
      
      const playerIds = await Promise.all(
        playerNames.map(name => GameService.createOrUpdatePlayer(name.trim()))
      );
      
      const gameId = await GameService.createGame(playerCount, gameName.trim());
      
      setShowPlayerNamesModal(false);
      router.push({
        pathname: '/game-flow',
        params: {
          gameId,
          playerCount: playerCount.toString(),
          playerNames: JSON.stringify(playerNames),
          playerIds: JSON.stringify(playerIds),
          customRoles: customRoles ? JSON.stringify(customRoles) : '',
          useSpecialRoles: useSpecialRoles.toString(),
          selectedSpecialRoles: JSON.stringify(selectedSpecialRoles),
        },
      });
    } catch (error) {
      Alert.alert('Error', 'Failed to start game. Please try again.');
      console.error('Game creation error:', error);
    } finally {
      setIsCreatingGame(false);
    }
  };

  const roles = customRoles || GameService.getRoleDistribution(playerCount);

  return (
    <View style={[styles.container, { backgroundColor: colors.background }]}>

      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
          <ArrowLeft size={24} color={colors.text} />
        </TouchableOpacity>
        <Text style={[styles.headerTitle, { color: colors.text }]}>Game Setup</Text>
        <ThemeToggle />
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* Leaderboard Preview */}
        <AceternityCard variant="glass" style={styles.section}>
          <View style={styles.sectionHeader}>
            <Crown size={20} color={colors.warning} />
            <Text style={[styles.sectionTitle, { color: colors.text }]}>Top Players</Text>
          </View>
          {leaderboardLoading ? (
            <Text style={[styles.loadingText, { color: colors.textSecondary }]}>Loading...</Text>
          ) : (
            <View style={styles.leaderboardPreview}>
              {topPlayers.slice(0, 3).map((player, index) => (
                <View key={player.id} style={styles.leaderboardItem}>
                  <View style={[
                    styles.rankBadge,
                    { backgroundColor: index === 0 ? colors.warning : index === 1 ? colors.info : colors.textSecondary }
                  ]}>
                    <Text style={styles.rankText}>#{index + 1}</Text>
                  </View>
                  <Text style={[styles.leaderboardName, { color: colors.text }]}>{player.name}</Text>
                  <Text style={[styles.leaderboardPoints, { color: colors.primary }]}>{player.total_points}pts</Text>
                </View>
              ))}
              {topPlayers.length === 0 && (
                <Text style={[styles.noPlayersText, { color: colors.textSecondary }]}>No games played yet</Text>
              )}
            </View>
          )}
        </AceternityCard>

        {/* Game Name */}
        <AceternityCard variant="spotlight" style={styles.section}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>Game Session Name</Text>
          <ModernInput
            label="Session Name"
            value={gameName}
            onChangeText={setGameName}
            placeholder="Enter game session name (e.g., 'Friday Night Game')"
            variant="glass"
          />
        </AceternityCard>

        {/* Player Count */}
        <AceternityCard variant="border" style={styles.section}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>Players</Text>
          <View style={styles.playerCountContainer}>
            <TouchableOpacity 
              style={[styles.countButton, { backgroundColor: colors.primary }]}
              onPress={() => updatePlayerCount(playerCount - 1)}
            >
              <Minus size={20} color="white" />
            </TouchableOpacity>
            
            <View style={styles.playerCountDisplay}>
              <Text style={[styles.playerCountText, { color: colors.text }]}>{playerCount}</Text>
              <Text style={[styles.playerCountLabel, { color: colors.textSecondary }]}>Players</Text>
            </View>
            
            <TouchableOpacity 
              style={[styles.countButton, { backgroundColor: colors.primary }]}
              onPress={() => updatePlayerCount(playerCount + 1)}
            >
              <Plus size={20} color="white" />
            </TouchableOpacity>
          </View>
          
          {/* Game Info */}
          <View style={styles.gameInfoRow}>
            <View style={styles.gameInfoItem}>
              <Text style={[styles.gameInfoLabel, { color: colors.textSecondary }]}>Duration</Text>
              <Text style={[styles.gameInfoValue, { color: colors.accent }]}>{Math.ceil(playerCount * 2)}-{Math.ceil(playerCount * 3)}min</Text>
            </View>
            <View style={styles.gameInfoItem}>
              <Text style={[styles.gameInfoLabel, { color: colors.textSecondary }]}>Rounds</Text>
              <Text style={[styles.gameInfoValue, { color: colors.accent }]}>{Math.ceil(playerCount * 0.6)}-{playerCount - 1}</Text>
            </View>
          </View>
        </AceternityCard>

        {/* Role Distribution */}
        <AceternityCard variant="glass" style={styles.section}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>Role Distribution</Text>
          <View style={styles.roleDistribution}>
            <View style={styles.roleCard}>
              <Text style={styles.roleEmoji}>👥</Text>
              <Text style={[styles.roleName, { color: colors.text }]}>Civilians</Text>
              <ModernBadge variant="success">{roles.civilians}</ModernBadge>
            </View>
            
            <View style={styles.roleCard}>
              <Text style={styles.roleEmoji}>🕵️</Text>
              <Text style={[styles.roleName, { color: colors.text }]}>Undercover</Text>
              <View style={styles.roleAdjuster}>
                <TouchableOpacity 
                  style={[styles.roleButton, { backgroundColor: colors.primary }]}
                  onPress={() => updateRoleCount('undercover', -1)}
                >
                  <Minus size={12} color="white" />
                </TouchableOpacity>
                <ModernBadge variant="destructive">{roles.undercover}</ModernBadge>
                <TouchableOpacity 
                  style={[styles.roleButton, { backgroundColor: colors.primary }]}
                  onPress={() => updateRoleCount('undercover', 1)}
                >
                  <Plus size={12} color="white" />
                </TouchableOpacity>
              </View>
            </View>
            
            <View style={styles.roleCard}>
              <Text style={styles.roleEmoji}>❓</Text>
              <Text style={[styles.roleName, { color: colors.text }]}>Mr. White</Text>
              <View style={styles.roleAdjuster}>
                <TouchableOpacity 
                  style={[styles.roleButton, { backgroundColor: colors.primary }]}
                  onPress={() => updateRoleCount('mrWhite', -1)}
                >
                  <Minus size={12} color="white" />
                </TouchableOpacity>
                <ModernBadge variant="warning">{roles.mrWhite}</ModernBadge>
                <TouchableOpacity 
                  style={[styles.roleButton, { backgroundColor: colors.primary }]}
                  onPress={() => updateRoleCount('mrWhite', 1)}
                >
                  <Plus size={12} color="white" />
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </AceternityCard>

        {/* Special Roles */}
        <AceternityCard variant="glass" style={styles.section}>
          <View style={styles.specialRolesHeader}>
            <View style={styles.sectionHeader}>
              <Zap size={20} color={colors.accent} />
              <Text style={[styles.sectionTitle, { color: colors.text }]}>Special Roles</Text>
            </View>
            <TouchableOpacity
              style={styles.toggleContainer}
              onPress={() => setUseSpecialRoles(!useSpecialRoles)}
            >
              {useSpecialRoles ? (
                <ToggleRight size={28} color={colors.success} />
              ) : (
                <ToggleLeft size={28} color={colors.textSecondary} />
              )}
            </TouchableOpacity>
          </View>
          
          {useSpecialRoles && (
            <>
              <Text style={[styles.sectionDescription, { color: colors.textSecondary }]}>
                Add chaos and strategy with special roles! {selectedSpecialRoles.length} selected.
              </Text>
              <AceternityButton
                variant="secondary"
                size="md"
                onPress={() => setShowSpecialRolesModal(true)}
                icon={<Settings size={16} color={colors.primary} />}
              >
                Configure Special Roles
              </AceternityButton>
            </>
          )}
        </AceternityCard>
      </ScrollView>

      {/* Start Button */}
      <View style={styles.startButtonContainer}>
        <AceternityButton
          variant="shimmer"
          size="lg"
          onPress={startGameSetup}
          disabled={isCreatingGame}
          loading={isCreatingGame}
          icon={<Play size={20} color="white" />}
          style={styles.startButton}
        >
          {isCreatingGame ? 'Creating Game...' : 'Setup Players'}
        </AceternityButton>
      </View>

      {/* Player Names Modal */}
      <Modal
        visible={showPlayerNamesModal}
        animationType="slide"
        presentationStyle="pageSheet"
      >
        <LinearGradient
          colors={['#0a0a1a', '#0f0f23']}
          style={styles.modalContainer}
        >
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Enter Player Names</Text>
            <TouchableOpacity onPress={() => setShowPlayerNamesModal(false)}>
              <X size={24} color="#F3F4F6" />
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.modalContent}>
            <Text style={styles.modalSubtitle}>
              Game: {gameName} • {playerCount} Players
            </Text>
            
            {playerNames.map((name, index) => (
              <ModernInput
                key={index}
                label={`Player ${index + 1}`}
                value={name}
                onChangeText={(text) => updatePlayerName(index, text)}
                placeholder={`Enter player ${index + 1} name`}
                style={styles.playerInputContainer}
              />
            ))}
          </ScrollView>

          <View style={styles.modalButtonContainer}>
            <AceternityButton
              variant="primary"
              size="lg"
              onPress={startGame}
              disabled={isCreatingGame}
              loading={isCreatingGame}
              icon={<Users size={20} color="white" />}
            >
              {isCreatingGame ? 'Creating Game...' : 'Start Game'}
            </AceternityButton>
          </View>
        </LinearGradient>
      </Modal>

      {/* Special Roles Modal */}
      <Modal
        visible={showSpecialRolesModal}
        animationType="slide"
        presentationStyle="pageSheet"
      >
        <LinearGradient
          colors={['#0a0a1a', '#0f0f23']}
          style={styles.modalContainer}
        >
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Special Roles</Text>
            <TouchableOpacity onPress={() => setShowSpecialRolesModal(false)}>
              <X size={24} color="#F3F4F6" />
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.modalContent}>
            <Text style={styles.modalSubtitle}>
              Select special roles to add chaos and strategy!
            </Text>
            <Text style={styles.modalWarning}>
              Limit: {Math.floor(playerCount / 2)} special roles for {playerCount} players
            </Text>
            
            {availableSpecialRoles.map((role) => (
              <TouchableOpacity
                key={role}
                style={[
                  styles.specialRoleCard,
                  selectedSpecialRoles.includes(role) && styles.selectedSpecialRoleCard
                ]}
                onPress={() => toggleSpecialRole(role)}
              >
                <View style={styles.specialRoleHeader}>
                  <Text style={styles.specialRoleEmoji}>
                    {GameService.getSpecialRoleEmoji(role)}
                  </Text>
                  <Text style={styles.specialRoleName}>
                    {role.split('-').map(word => 
                      word.charAt(0).toUpperCase() + word.slice(1)
                    ).join(' ')}
                  </Text>
                  <View style={styles.specialRoleToggle}>
                    {selectedSpecialRoles.includes(role) ? (
                      <ToggleRight size={20} color="#8B5CF6" />
                    ) : (
                      <ToggleLeft size={20} color="#6B7280" />
                    )}
                  </View>
                </View>
                <Text style={styles.specialRoleDescription}>
                  {GameService.getSpecialRoleDescription(role)}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </LinearGradient>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 20,
    paddingTop: 60,
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  section: {
    marginBottom: 24,
    padding: 20,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  inputContainer: {
    gap: 8,
  },
  inputLabel: {
    fontSize: 14,
    fontWeight: '600',
  },
  textInput: {
    borderWidth: 1,
    borderRadius: 12,
    padding: 16,
  },
  textInputText: {
    fontSize: 16,
  },
  playerCountContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 32,
    marginBottom: 24,
  },
  countButton: {
    width: 48,
    height: 48,
    borderRadius: 24,
    alignItems: 'center',
    justifyContent: 'center',
  },
  playerCountDisplay: {
    alignItems: 'center',
    gap: 4,
  },
  playerCountText: {
    fontSize: 36,
    fontWeight: 'bold',
  },
  playerCountLabel: {
    fontSize: 14,
  },
  gameInfoRow: {
    flexDirection: 'row',
    gap: 24,
    justifyContent: 'center',
  },
  gameInfoItem: {
    alignItems: 'center',
    gap: 4,
  },
  gameInfoLabel: {
    fontSize: 12,
  },
  gameInfoValue: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  sectionDescription: {
    fontSize: 14,
    marginBottom: 16,
    lineHeight: 20,
  },
  gameNameInput: {
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderColor: 'rgba(255, 255, 255, 0.2)',
  },
  roleDistribution: {
    gap: 16,
  },
  roleCard: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 16,
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    borderRadius: 12,
  },
  roleEmoji: {
    fontSize: 24,
  },
  roleName: {
    flex: 1,
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 12,
  },
  roleAdjuster: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  roleButton: {
    width: 24,
    height: 24,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
  },
  specialRolesHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  toggleContainer: {
    padding: 4,
  },
  startButtonContainer: {
    padding: 20,
  },
  startButton: {
    width: '100%',
  },
  leaderboardPreview: {
    gap: 12,
  },
  leaderboardItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
    paddingVertical: 8,
  },
  rankBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  rankText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: 'bold',
  },
  leaderboardName: {
    flex: 1,
    fontSize: 14,
    color: '#FFFFFF',
    fontWeight: '500',
  },
  leaderboardPoints: {
    fontSize: 12,
    color: '#8B5CF6',
    fontWeight: '600',
  },
  noPlayersText: {
    fontSize: 14,
    color: '#9CA3AF',
    textAlign: 'center',
    fontStyle: 'italic',
  },
  loadingText: {
    fontSize: 14,
    color: '#9CA3AF',
    textAlign: 'center',
  },
  modalContainer: {
    flex: 1,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    paddingTop: 60,
    borderBottomWidth: 1,
    borderBottomColor: '#374151',
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#F3F4F6',
  },
  modalContent: {
    flex: 1,
    padding: 20,
  },
  modalSubtitle: {
    fontSize: 16,
    color: '#8B5CF6',
    textAlign: 'center',
    marginBottom: 24,
    fontWeight: '600',
  },
  modalWarning: {
    fontSize: 12,
    color: '#F59E0B',
    textAlign: 'center',
    marginBottom: 20,
    fontStyle: 'italic',
  },
  playerInputContainer: {
    marginBottom: 12,
  },
  modalButtonContainer: {
    padding: 20,
  },
  specialRoleCard: {
    backgroundColor: '#374151',
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#4B5563',
  },
  selectedSpecialRoleCard: {
    borderColor: '#8B5CF6',
  },
  specialRoleHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  specialRoleEmoji: {
    fontSize: 20,
  },
  specialRoleName: {
    flex: 1,
    fontSize: 16,
    fontWeight: 'bold',
    color: '#F3F4F6',
  },
  specialRoleToggle: {
    padding: 4,
  },
  specialRoleDescription: {
    fontSize: 14,
    color: '#D1D5DB',
    lineHeight: 20,
  },
});

--- END FILE ---

>>> FILE: app/(tabs)/index.tsx (size: 13509 bytes)
--- BEGIN FILE ---
import { View, Text, StyleSheet, Dimensions, ScrollView } from 'react-native';
import { router } from 'expo-router';
import { LinearGradient } from 'expo-linear-gradient';
import { Play, Trophy, Users, Zap, Star, Crown, Shield, Target, Settings } from 'lucide-react-native';
import { AceternityCard } from '@/components/ui/aceternity-card';
import { AceternityButton } from '@/components/ui/aceternity-button';
import { ThemeToggle } from '@/components/ui/theme-toggle';
import { useTheme } from '@/hooks/useTheme';

const { width, height } = Dimensions.get('window');

export default function HomeScreen() {
  const { theme, colors } = useTheme();

  return (
    <View style={[styles.container, { backgroundColor: colors.background }]}>
      <LinearGradient
        colors={theme === 'dark' 
          ? ['#0F172A', '#1E293B', '#334155', '#475569']
          : ['#F8FAFC', '#F1F5F9', '#E2E8F0', '#CBD5E1']
        }
        style={styles.backgroundGradient}
      />
      
      {/* Animated background elements */}
      <View style={styles.backgroundElements}>
        {[...Array(20)].map((_, i) => (
          <View
            key={i}
            style={[
              styles.floatingElement,
              {
                left: Math.random() * width,
                top: Math.random() * height,
                backgroundColor: theme === 'dark' 
                  ? 'rgba(96, 165, 250, 0.3)' 
                  : 'rgba(59, 130, 246, 0.2)',
              },
            ]}
          />
        ))}
      </View>

      {/* Header with Theme Toggle */}
      <View style={styles.header}>
        <View style={styles.headerLeft}>
          <Text style={[styles.headerTitle, { color: colors.text }]}>UNDERCOVER</Text>
          <Text style={[styles.headerSubtitle, { color: colors.textSecondary }]}>Social Deduction Game</Text>
        </View>
        <ThemeToggle />
      </View>

      <ScrollView style={styles.scrollContainer} showsVerticalScrollIndicator={false}>
        <View style={styles.content}>
          {/* Hero Section */}
          <View style={styles.heroSection}>
            <AceternityCard variant="glass" style={styles.heroCard}>
              <View style={styles.heroContent}>
                <Text style={styles.gameIcon}>🎭</Text>
                <View style={styles.titleContainer}>
                  <Text style={[styles.title, { color: colors.text }]}>Ready to Play?</Text>
                  <Text style={[styles.subtitle, { color: colors.textSecondary }]}>
                    Master the art of deception in this thrilling social game
                  </Text>
                </View>
                <View style={styles.statusBadge}>
                  <View style={[styles.statusDot, { backgroundColor: colors.success }]} />
                  <Text style={[styles.statusText, { color: colors.success }]}>Online & Ready</Text>
                </View>
              </View>
            </AceternityCard>
          </View>

          {/* Quick Stats */}
          <View style={styles.statsSection}>
            <View style={styles.statsGrid}>
              <AceternityCard variant="spotlight" style={styles.statCard}>
                <Users size={24} color={colors.primary} />
                <Text style={[styles.statNumber, { color: colors.text }]}>3-20</Text>
                <Text style={[styles.statLabel, { color: colors.textSecondary }]}>Players</Text>
              </AceternityCard>
              
              <AceternityCard variant="spotlight" style={styles.statCard}>
                <Target size={24} color={colors.success} />
                <Text style={[styles.statNumber, { color: colors.text }]}>5-15</Text>
                <Text style={[styles.statLabel, { color: colors.textSecondary }]}>Minutes</Text>
              </AceternityCard>
              
              <AceternityCard variant="spotlight" style={styles.statCard}>
                <Crown size={24} color={colors.warning} />
                <Text style={[styles.statNumber, { color: colors.text }]}>∞</Text>
                <Text style={[styles.statLabel, { color: colors.textSecondary }]}>Rounds</Text>
              </AceternityCard>
            </View>
          </View>

          {/* Main Actions */}
          <View style={styles.actionSection}>
            <AceternityButton
              variant="shimmer"
              size="xl"
              onPress={() => router.push('/game')}
              style={styles.primaryButton}
              icon={<Play size={24} color="white" />}
            >
              Start New Game
            </AceternityButton>

            <View style={styles.secondaryActions}>
              <AceternityButton
                variant="glow"
                size="lg"
                onPress={() => router.push('/leaderboard')}
                style={styles.secondaryButton}
                icon={<Trophy size={20} color="white" />}
              >
                Leaderboard
              </AceternityButton>
              
              <AceternityButton
                variant="outline"
                size="lg"
                onPress={() => router.push('/word-libraries')}
                style={styles.secondaryButton}
                icon={<Zap size={20} color={colors.primary} />}
              >
                Word Packs
              </AceternityButton>
            </View>
          </View>

          {/* Game Features */}
          <View style={styles.featuresSection}>
            <Text style={[styles.sectionTitle, { color: colors.text }]}>Why You'll Love It</Text>
            <View style={styles.featuresGrid}>
              <AceternityCard variant="border" style={styles.featureCard}>
                <Shield size={28} color={colors.primary} />
                <Text style={[styles.featureTitle, { color: colors.text }]}>Pass & Play</Text>
                <Text style={[styles.featureDescription, { color: colors.textSecondary }]}>
                  One device for everyone. No downloads required.
                </Text>
              </AceternityCard>
              
              <AceternityCard variant="border" style={styles.featureCard}>
                <Star size={28} color={colors.success} />
                <Text style={[styles.featureTitle, { color: colors.text }]}>Special Roles</Text>
                <Text style={[styles.featureDescription, { color: colors.textSecondary }]}>
                  Add chaos with unique abilities and powers.
                </Text>
              </AceternityCard>
              
              <AceternityCard variant="border" style={styles.featureCard}>
                <Target size={28} color={colors.error} />
                <Text style={[styles.featureTitle, { color: colors.text }]}>Mind Games</Text>
                <Text style={[styles.featureDescription, { color: colors.textSecondary }]}>
                  Bluff, deduce, and outsmart your friends.
                </Text>
              </AceternityCard>
            </View>
          </View>

          {/* How to Play */}
          <AceternityCard variant="gradient" style={styles.howToPlayCard}>
            <Text style={[styles.howToPlayTitle, { color: colors.text }]}>How to Play</Text>
            <Text style={[styles.howToPlayDescription, { color: colors.textSecondary }]}>
              Master the art of deception in this thrilling social game where words are weapons 
              and trust is a luxury you can't afford.
            </Text>
            
            <View style={styles.gameSteps}>
              <View style={styles.step}>
                <View style={[styles.stepBadge, { backgroundColor: colors.primary }]}>
                  <Text style={styles.stepNumber}>1</Text>
                </View>
                <View style={styles.stepContent}>
                  <Text style={[styles.stepTitle, { color: colors.text }]}>Get Your Secret Word</Text>
                  <Text style={[styles.stepDescription, { color: colors.textSecondary }]}>
                    Receive your hidden word - but beware, some players have different words!
                  </Text>
                </View>
              </View>
              
              <View style={styles.step}>
                <View style={[styles.stepBadge, { backgroundColor: colors.warning }]}>
                  <Text style={styles.stepNumber}>2</Text>
                </View>
                <View style={styles.stepContent}>
                  <Text style={[styles.stepTitle, { color: colors.text }]}>Describe Cleverly</Text>
                  <Text style={[styles.stepDescription, { color: colors.textSecondary }]}>
                    Give clues without revealing your word. Stay subtle, stay alive.
                  </Text>
                </View>
              </View>
              
              <View style={styles.step}>
                <View style={[styles.stepBadge, { backgroundColor: colors.error }]}>
                  <Text style={styles.stepNumber}>3</Text>
                </View>
                <View style={styles.stepContent}>
                  <Text style={[styles.stepTitle, { color: colors.text }]}>Vote & Eliminate</Text>
                  <Text style={[styles.stepDescription, { color: colors.textSecondary }]}>
                    Discuss suspicions and vote out the impostors hiding among you.
                  </Text>
                </View>
              </View>
            </View>
          </AceternityCard>

          {/* Call to Action */}
          <View style={styles.ctaSection}>
            <Text style={[styles.ctaTitle, { color: colors.text }]}>Ready for the Ultimate Mind Game?</Text>
            <AceternityButton
              variant="glow"
              size="xl"
              onPress={() => router.push('/game')}
              icon={<Play size={24} color="white" />}
            >
              Start Playing Now
            </AceternityButton>
          </View>
        </View>
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  backgroundGradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  backgroundElements: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  floatingElement: {
    position: 'absolute',
    width: 4,
    height: 4,
    borderRadius: 2,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 24,
    paddingTop: 60,
    paddingBottom: 20,
  },
  headerLeft: {
    flex: 1,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    letterSpacing: 1,
  },
  headerSubtitle: {
    fontSize: 14,
    marginTop: 2,
  },
  scrollContainer: {
    flex: 1,
  },
  content: {
    padding: 24,
  },
  heroSection: {
    marginBottom: 32,
  },
  heroCard: {
    alignItems: 'center',
    paddingVertical: 32,
  },
  heroContent: {
    alignItems: 'center',
    gap: 20,
  },
  gameIcon: {
    fontSize: 64,
  },
  titleContainer: {
    alignItems: 'center',
    gap: 8,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    textAlign: 'center',
    lineHeight: 22,
  },
  statusBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: 'rgba(16, 185, 129, 0.1)',
  },
  statusDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
  },
  statusText: {
    fontSize: 14,
    fontWeight: '600',
  },
  statsSection: {
    marginBottom: 32,
  },
  statsGrid: {
    flexDirection: 'row',
    gap: 16,
  },
  statCard: {
    flex: 1,
    alignItems: 'center',
    padding: 20,
    gap: 8,
  },
  statNumber: {
    fontSize: 24,
    fontWeight: 'bold',
  },
  statLabel: {
    fontSize: 12,
    textTransform: 'uppercase',
    letterSpacing: 1,
  },
  actionSection: {
    marginBottom: 40,
    gap: 20,
  },
  primaryButton: {
    marginBottom: 8,
  },
  secondaryActions: {
    flexDirection: 'row',
    gap: 16,
  },
  secondaryButton: {
    flex: 1,
  },
  featuresSection: {
    marginBottom: 40,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 24,
    textAlign: 'center',
  },
  featuresGrid: {
    gap: 16,
  },
  featureCard: {
    alignItems: 'center',
    padding: 24,
    gap: 16,
  },
  featureTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  featureDescription: {
    fontSize: 14,
    textAlign: 'center',
    lineHeight: 20,
  },
  howToPlayCard: {
    padding: 32,
    marginBottom: 40,
  },
  howToPlayTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 16,
    textAlign: 'center',
  },
  howToPlayDescription: {
    fontSize: 16,
    lineHeight: 24,
    textAlign: 'center',
    marginBottom: 32,
  },
  gameSteps: {
    gap: 24,
  },
  step: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    gap: 16,
  },
  stepBadge: {
    width: 32,
    height: 32,
    borderRadius: 16,
    alignItems: 'center',
    justifyContent: 'center',
  },
  stepNumber: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  stepContent: {
    flex: 1,
    gap: 8,
  },
  stepTitle: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  stepDescription: {
    fontSize: 14,
    lineHeight: 20,
  },
  ctaSection: {
    alignItems: 'center',
    gap: 20,
    paddingBottom: 40,
  },
  ctaTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    textAlign: 'center',
  },
});

--- END FILE ---

>>> FILE: app/(tabs)/leaderboard.tsx (size: 9895 bytes)
--- BEGIN FILE ---
import { View, Text, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { useState, useEffect } from 'react';
import { Trophy, Award, Star, Medal, Calendar, Users, Clock } from 'lucide-react-native';
import { useLeaderboard } from '@/hooks/useGameData';
import { useTheme } from '@/hooks/useTheme';


export default function LeaderboardScreen() {
  const { colors } = useTheme();
  const { topPlayers, recentGames, loading, error } = useLeaderboard();
  const [sortBy, setSortBy] = useState<'points' | 'recent'>('points');


  const getRoleColor = (role: string) => {
    switch (role) {
      case 'civilian': return '#10B981';
      case 'undercover': return '#EF4444';
      case 'mrwhite': return '#F59E0B';
      default: return '#6B7280';
    }
  };

  const getRoleName = (role: string) => {
    switch (role) {
      case 'civilian': return 'Civilian';
      case 'undercover': return 'Undercover';
      case 'mrwhite': return 'Mr. White';
      default: return 'Unknown';
    }
  };

  const getRoleEmoji = (role: string) => {
    switch (role) {
      case 'civilian': return '👥';
      case 'undercover': return '🕵️';
      case 'mrwhite': return '❓';
      default: return '❓';
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString();
  };

  const getRankIcon = (index: number) => {
    switch (index) {
      case 0: return <Trophy size={20} color="#F59E0B" />;
      case 1: return <Medal size={20} color="#D1D5DB" />;
      case 2: return <Award size={20} color="#CD7F32" />;
      default: return <Star size={16} color="#6B7280" />;
    }
  };

  const getWinRate = (player: any) => {
    if (player.games_played === 0) return 0;
    return Math.round((player.games_won / player.games_played) * 100);
  };

  if (loading) {
    return (
      <View style={[styles.container, { backgroundColor: colors.background }]}>
        <View style={styles.loadingContainer}>
          <Text style={[styles.loadingText, { color: colors.textSecondary }]}>Loading leaderboard...</Text>
        </View>
      </View>
    );
  }

  return (
    <View style={[styles.container, { backgroundColor: colors.background }]}>
      <View style={styles.header}>
        <Text style={[styles.title, { color: colors.text }]}>🏆 Leaderboard</Text>
        <Text style={[styles.subtitle, { color: colors.textSecondary }]}>Hall of Fame</Text>
      </View>

      <View style={styles.sortButtons}>
        <TouchableOpacity
          style={[
            styles.sortButton, 
            { backgroundColor: colors.surface },
            sortBy === 'points' && { backgroundColor: colors.primary }
          ]}
          onPress={() => setSortBy('points')}
        >
          <Text style={[
            styles.sortButtonText, 
            { color: colors.textSecondary },
            sortBy === 'points' && { color: '#FFFFFF' }
          ]}>
            Top Players
          </Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={[
            styles.sortButton, 
            { backgroundColor: colors.surface },
            sortBy === 'recent' && { backgroundColor: colors.primary }
          ]}
          onPress={() => setSortBy('recent')}
        >
          <Text style={[
            styles.sortButtonText, 
            { color: colors.textSecondary },
            sortBy === 'recent' && { color: '#FFFFFF' }
          ]}>
            Recent Games
          </Text>
        </TouchableOpacity>
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {sortBy === 'points' ? (
          <>
            <Text style={[styles.sectionTitle, { color: colors.text }]}>Overall Rankings</Text>
            {topPlayers.map((player, index) => (
              <View key={player.id} style={[styles.rankCard, { backgroundColor: colors.surface, borderColor: colors.border }]}>
                <View style={styles.rankInfo}>
                  <View style={styles.rankIconContainer}>
                    {getRankIcon(index)}
                  </View>
                  <View style={styles.playerInfo}>
                    <Text style={[styles.playerName, { color: colors.text }]}>#{index + 1} {player.name}</Text>
                    <Text style={[styles.totalPoints, { color: colors.warning }]}>{player.total_points} points</Text>
                    <View style={styles.playerStats}>
                      <Text style={[styles.statText, { color: colors.textSecondary }]}>
                        {player.games_played} games • {getWinRate(player)}% win rate
                      </Text>
                    </View>
                  </View>
                </View>
              </View>
            ))}
          </>
        ) : (
          <>
            <Text style={[styles.sectionTitle, { color: colors.text }]}>Recent Game Results</Text>
            {recentGames.map((game) => (
              <View key={game.id} style={[styles.gameCard, { backgroundColor: colors.surface, borderColor: colors.border }]}>
                <View style={styles.scoreHeader}>
                  <Text style={[styles.gameName, { color: colors.text }]}>{game.game_name || 'Unnamed Game'}</Text>
                  <View style={styles.gameInfo}>
                    <Users size={16} color={colors.primary} />
                    <Text style={[styles.gamePlayerCount, { color: colors.primary }]}>{game.player_count} players</Text>
                  </View>
                  <Text style={[styles.scoreDate, { color: colors.textSecondary }]}>{formatDate(game.completed_at)}</Text>
                </View>
                
                <View style={styles.scoreDetails}>
                  <Text style={[styles.winnerText, { color: colors.warning }]}>
                    🏆 {game.winner_role} Victory
                  </Text>
                  <View style={styles.gameDuration}>
                    <Clock size={12} color={colors.textSecondary} />
                    <Text style={[styles.durationText, { color: colors.textSecondary }]}>
                      {game.duration_minutes || 0}min • {game.total_rounds} rounds
                    </Text>
                  </View>
                </View>
                
                {game.word_pair_used && (
                  <View style={[styles.wordPairUsed, { backgroundColor: colors.background }]}>
                    <Text style={[styles.wordPairText, { color: colors.text }]}>
                      Words: {game.word_pair_used.civilian} vs {game.word_pair_used.undercover}
                    </Text>
                  </View>
                )}
              </View>
            ))}
          </>
        )}

        {(sortBy === 'points' ? topPlayers : recentGames).length === 0 && (
          <View style={styles.emptyState}>
            <Trophy size={48} color={colors.textSecondary} />
            <Text style={[styles.emptyStateTitle, { color: colors.textSecondary }]}>No Games Played Yet</Text>
            <Text style={[styles.emptyStateText, { color: colors.textSecondary }]}>
              Start playing games to see scores and rankings here!
            </Text>
          </View>
        )}
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    alignItems: 'center',
    paddingTop: 60,
    paddingBottom: 20,
    gap: 4,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
  },
  subtitle: {
    fontSize: 16,
    fontStyle: 'italic',
  },
  sortButtons: {
    flexDirection: 'row',
    marginHorizontal: 20,
    marginBottom: 20,
    borderRadius: 12,
    padding: 4,
  },
  sortButton: {
    flex: 1,
    paddingVertical: 12,
    alignItems: 'center',
    borderRadius: 8,
  },
  sortButtonText: {
    fontSize: 14,
    fontWeight: '600',
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 16,
  },
  rankCard: {
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    borderWidth: 1,
  },
  rankInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  rankIconContainer: {
    width: 40,
    alignItems: 'center',
  },
  playerInfo: {
    flex: 1,
  },
  playerStats: {
    marginTop: 4,
  },
  statText: {
    fontSize: 12,
  },
  playerName: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  totalPoints: {
    fontSize: 14,
    fontWeight: '600',
  },
  gameCard: {
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    borderWidth: 1,
  },
  scoreHeader: {
    gap: 8,
    marginBottom: 8,
  },
  gameName: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  gameInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  gameInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
  },
  gamePlayerCount: {
    fontSize: 14,
    fontWeight: '600',
  },
  scoreDate: {
    fontSize: 12,
  },
  scoreDetails: {
    gap: 8,
    marginBottom: 8,
  },
  winnerText: {
    fontSize: 14,
    fontWeight: 'bold',
  },
  gameDuration: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  durationText: {
    fontSize: 12,
  },
  wordPairUsed: {
    padding: 8,
    borderRadius: 6,
  },
  wordPairText: {
    fontSize: 12,
    fontStyle: 'italic',
  },
  emptyState: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 60,
    gap: 16,
  },
  emptyStateTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  emptyStateText: {
    fontSize: 14,
    textAlign: 'center',
    lineHeight: 20,
    paddingHorizontal: 40,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
  },
});

--- END FILE ---

>>> FILE: app/(tabs)/settings.tsx (size: 16848 bytes)
--- BEGIN FILE ---
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, TextInput, Modal, Alert } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { useState } from 'react';
import { BookOpen, Plus, CreditCard as Edit3, Trash2, Eye, X } from 'lucide-react-native';

interface WordPair {
  id: number;
  civilian: string;
  undercover: string;
  category: string;
}

interface WordLibrary {
  name: string;
  pairs: WordPair[];
  isActive: boolean;
}

export default function SettingsScreen() {
  const [wordLibraries, setWordLibraries] = useState<WordLibrary[]>([
    {
      name: "Classic Pack",
      pairs: [
        { id: 1, civilian: "Cat", undercover: "Dog", category: "Animals" },
        { id: 2, civilian: "Coffee", undercover: "Tea", category: "Drinks" },
        { id: 3, civilian: "Pizza", undercover: "Burger", category: "Food" },
        { id: 4, civilian: "Apple", undercover: "Orange", category: "Fruits" },
        { id: 5, civilian: "Car", undercover: "Motorcycle", category: "Vehicles" },
      ],
      isActive: true
    },
    {
      name: "Entertainment",
      pairs: [
        { id: 6, civilian: "Movie", undercover: "TV Show", category: "Media" },
        { id: 7, civilian: "Guitar", undercover: "Piano", category: "Music" },
        { id: 8, civilian: "Football", undercover: "Basketball", category: "Sports" },
        { id: 9, civilian: "Book", undercover: "Magazine", category: "Reading" },
        { id: 10, civilian: "Theatre", undercover: "Cinema", category: "Entertainment" },
      ],
      isActive: true
    },
    {
      name: "Custom Pack",
      pairs: [],
      isActive: false
    }
  ]);

  const [showAddModal, setShowAddModal] = useState(false);
  const [showLibraryModal, setShowLibraryModal] = useState(false);
  const [selectedLibrary, setSelectedLibrary] = useState<WordLibrary | null>(null);
  const [newPair, setNewPair] = useState({ civilian: '', undercover: '', category: '' });
  const [editingPair, setEditingPair] = useState<WordPair | null>(null);

  const toggleLibrary = (libraryName: string) => {
    setWordLibraries(libraries =>
      libraries.map(lib =>
        lib.name === libraryName ? { ...lib, isActive: !lib.isActive } : lib
      )
    );
  };

  const addWordPair = () => {
    if (!newPair.civilian.trim() || !newPair.undercover.trim()) {
      Alert.alert('Error', 'Please fill in both words');
      return;
    }

    const customLib = wordLibraries.find(lib => lib.name === 'Custom Pack');
    if (customLib) {
      const newId = Math.max(...wordLibraries.flatMap(lib => lib.pairs.map(p => p.id)), 0) + 1;
      
      setWordLibraries(libraries =>
        libraries.map(lib =>
          lib.name === 'Custom Pack'
            ? {
                ...lib,
                pairs: [
                  ...lib.pairs,
                  {
                    id: newId,
                    civilian: newPair.civilian.trim(),
                    undercover: newPair.undercover.trim(),
                    category: newPair.category.trim() || 'Custom'
                  }
                ]
              }
            : lib
        )
      );

      setNewPair({ civilian: '', undercover: '', category: '' });
      setShowAddModal(false);
      
      Alert.alert('Success', 'Word pair added to Custom Pack!');
    }
  };

  const editWordPair = () => {
    if (!editingPair || !editingPair.civilian.trim() || !editingPair.undercover.trim()) {
      Alert.alert('Error', 'Please fill in both words');
      return;
    }

    setWordLibraries(libraries =>
      libraries.map(lib => ({
        ...lib,
        pairs: lib.pairs.map(pair =>
          pair.id === editingPair.id ? editingPair : pair
        )
      }))
    );

    setEditingPair(null);
    Alert.alert('Success', 'Word pair updated!');
  };

  const deleteWordPair = (pairId: number) => {
    Alert.alert(
      'Delete Word Pair',
      'Are you sure you want to delete this word pair?',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: () => {
            setWordLibraries(libraries =>
              libraries.map(lib => ({
                ...lib,
                pairs: lib.pairs.filter(pair => pair.id !== pairId)
              }))
            );
          }
        }
      ]
    );
  };

  const getTotalActivePairs = () => {
    return wordLibraries
      .filter(lib => lib.isActive)
      .reduce((total, lib) => total + lib.pairs.length, 0);
  };

  return (
    <LinearGradient
      colors={['#1F2937', '#111827']}
      style={styles.container}
    >
      <View style={styles.header}>
        <Text style={styles.title}>📚 Word Libraries</Text>
        <Text style={styles.subtitle}>Manage your word collections</Text>
      </View>

      <View style={styles.statsCard}>
        <Text style={styles.statsText}>
          Active Word Pairs: {getTotalActivePairs()}
        </Text>
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {wordLibraries.map((library) => (
          <View key={library.name} style={styles.libraryCard}>
            <View style={styles.libraryHeader}>
              <View style={styles.libraryInfo}>
                <Text style={styles.libraryName}>{library.name}</Text>
                <Text style={styles.libraryCount}>
                  {library.pairs.length} pairs
                </Text>
              </View>
              
              <View style={styles.libraryActions}>
                <TouchableOpacity
                  style={styles.viewButton}
                  onPress={() => {
                    setSelectedLibrary(library);
                    setShowLibraryModal(true);
                  }}
                >
                  <Eye size={16} color="#8B5CF6" />
                </TouchableOpacity>
                
                <TouchableOpacity
                  style={[
                    styles.toggleButton,
                    { backgroundColor: library.isActive ? '#10B981' : '#6B7280' }
                  ]}
                  onPress={() => toggleLibrary(library.name)}
                >
                  <Text style={styles.toggleButtonText}>
                    {library.isActive ? 'ON' : 'OFF'}
                  </Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        ))}

        <TouchableOpacity
          style={styles.addButton}
          onPress={() => setShowAddModal(true)}
        >
          <Plus size={20} color="white" />
          <Text style={styles.addButtonText}>Add Custom Word Pair</Text>
        </TouchableOpacity>
      </ScrollView>

      {/* Add Word Pair Modal */}
      <Modal
        visible={showAddModal}
        animationType="slide"
        presentationStyle="pageSheet"
      >
        <LinearGradient
          colors={['#1F2937', '#111827']}
          style={styles.modalContainer}
        >
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Add Word Pair</Text>
            <TouchableOpacity onPress={() => setShowAddModal(false)}>
              <X size={24} color="#F3F4F6" />
            </TouchableOpacity>
          </View>

          <View style={styles.modalContent}>
            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Civilian Word</Text>
              <TextInput
                style={styles.textInput}
                value={newPair.civilian}
                onChangeText={(text) => setNewPair({ ...newPair, civilian: text })}
                placeholder="e.g., Cat"
                placeholderTextColor="#9CA3AF"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Undercover Word</Text>
              <TextInput
                style={styles.textInput}
                value={newPair.undercover}
                onChangeText={(text) => setNewPair({ ...newPair, undercover: text })}
                placeholder="e.g., Dog"
                placeholderTextColor="#9CA3AF"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Category (Optional)</Text>
              <TextInput
                style={styles.textInput}
                value={newPair.category}
                onChangeText={(text) => setNewPair({ ...newPair, category: text })}
                placeholder="e.g., Animals"
                placeholderTextColor="#9CA3AF"
              />
            </View>

            <TouchableOpacity style={styles.saveButton} onPress={addWordPair}>
              <Text style={styles.saveButtonText}>Add Word Pair</Text>
            </TouchableOpacity>
          </View>
        </LinearGradient>
      </Modal>

      {/* Library View Modal */}
      <Modal
        visible={showLibraryModal}
        animationType="slide"
        presentationStyle="pageSheet"
      >
        <LinearGradient
          colors={['#1F2937', '#111827']}
          style={styles.modalContainer}
        >
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>{selectedLibrary?.name}</Text>
            <TouchableOpacity onPress={() => setShowLibraryModal(false)}>
              <X size={24} color="#F3F4F6" />
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.modalContent}>
            {selectedLibrary?.pairs.map((pair) => (
              <View key={pair.id} style={styles.wordPairCard}>
                <View style={styles.wordPairInfo}>
                  <Text style={styles.wordText}>
                    👥 {pair.civilian} vs 🕵️ {pair.undercover}
                  </Text>
                  <Text style={styles.categoryText}>
                    Category: {pair.category}
                  </Text>
                </View>
                
                {selectedLibrary.name === 'Custom Pack' && (
                  <View style={styles.wordPairActions}>
                    <TouchableOpacity
                      style={styles.editButton}
                      onPress={() => setEditingPair(pair)}
                    >
                      <Edit3 size={14} color="#8B5CF6" />
                    </TouchableOpacity>
                    
                    <TouchableOpacity
                      style={styles.deleteButton}
                      onPress={() => deleteWordPair(pair.id)}
                    >
                      <Trash2 size={14} color="#EF4444" />
                    </TouchableOpacity>
                  </View>
                )}
              </View>
            ))}
            
            {selectedLibrary?.pairs.length === 0 && (
              <Text style={styles.emptyText}>
                No word pairs in this library yet.
              </Text>
            )}
          </ScrollView>
        </LinearGradient>
      </Modal>

      {/* Edit Word Pair Modal */}
      <Modal
        visible={!!editingPair}
        animationType="slide"
        presentationStyle="pageSheet"
      >
        <LinearGradient
          colors={['#1F2937', '#111827']}
          style={styles.modalContainer}
        >
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Edit Word Pair</Text>
            <TouchableOpacity onPress={() => setEditingPair(null)}>
              <X size={24} color="#F3F4F6" />
            </TouchableOpacity>
          </View>

          <View style={styles.modalContent}>
            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Civilian Word</Text>
              <TextInput
                style={styles.textInput}
                value={editingPair?.civilian || ''}
                onChangeText={(text) => setEditingPair(prev => prev ? { ...prev, civilian: text } : null)}
                placeholder="e.g., Cat"
                placeholderTextColor="#9CA3AF"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Undercover Word</Text>
              <TextInput
                style={styles.textInput}
                value={editingPair?.undercover || ''}
                onChangeText={(text) => setEditingPair(prev => prev ? { ...prev, undercover: text } : null)}
                placeholder="e.g., Dog"
                placeholderTextColor="#9CA3AF"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Category</Text>
              <TextInput
                style={styles.textInput}
                value={editingPair?.category || ''}
                onChangeText={(text) => setEditingPair(prev => prev ? { ...prev, category: text } : null)}
                placeholder="e.g., Animals"
                placeholderTextColor="#9CA3AF"
              />
            </View>

            <TouchableOpacity style={styles.saveButton} onPress={editWordPair}>
              <Text style={styles.saveButtonText}>Save Changes</Text>
            </TouchableOpacity>
          </View>
        </LinearGradient>
      </Modal>
    </LinearGradient>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    alignItems: 'center',
    paddingTop: 60,
    paddingBottom: 20,
    gap: 4,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#F3F4F6',
  },
  subtitle: {
    fontSize: 16,
    color: '#9CA3AF',
  },
  statsCard: {
    backgroundColor: '#374151',
    marginHorizontal: 20,
    marginBottom: 20,
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  statsText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#8B5CF6',
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  libraryCard: {
    backgroundColor: '#374151',
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#4B5563',
  },
  libraryHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  libraryInfo: {
    flex: 1,
  },
  libraryName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#F3F4F6',
    marginBottom: 4,
  },
  libraryCount: {
    fontSize: 14,
    color: '#9CA3AF',
  },
  libraryActions: {
    flexDirection: 'row',
    gap: 8,
  },
  viewButton: {
    backgroundColor: 'rgba(139, 92, 246, 0.1)',
    padding: 8,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#8B5CF6',
  },
  toggleButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 6,
  },
  toggleButtonText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  addButton: {
    backgroundColor: '#8B5CF6',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    padding: 16,
    borderRadius: 12,
    marginTop: 20,
    marginBottom: 40,
  },
  addButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  modalContainer: {
    flex: 1,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    paddingTop: 60,
    borderBottomWidth: 1,
    borderBottomColor: '#374151',
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#F3F4F6',
  },
  modalContent: {
    flex: 1,
    padding: 20,
  },
  inputGroup: {
    marginBottom: 20,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#D1D5DB',
    marginBottom: 8,
  },
  textInput: {
    backgroundColor: '#374151',
    color: '#F3F4F6',
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#4B5563',
    fontSize: 16,
  },
  saveButton: {
    backgroundColor: '#8B5CF6',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    marginTop: 20,
  },
  saveButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  wordPairCard: {
    backgroundColor: '#374151',
    padding: 16,
    borderRadius: 8,
    marginBottom: 12,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  wordPairInfo: {
    flex: 1,
  },
  wordText: {
    fontSize: 16,
    color: '#F3F4F6',
    fontWeight: '500',
    marginBottom: 4,
  },
  categoryText: {
    fontSize: 12,
    color: '#9CA3AF',
  },
  wordPairActions: {
    flexDirection: 'row',
    gap: 8,
  },
  editButton: {
    backgroundColor: 'rgba(139, 92, 246, 0.1)',
    padding: 8,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#8B5CF6',
  },
  deleteButton: {
    backgroundColor: 'rgba(239, 68, 68, 0.1)',
    padding: 8,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#EF4444',
  },
  emptyText: {
    color: '#9CA3AF',
    fontSize: 16,
    textAlign: 'center',
    fontStyle: 'italic',
    marginTop: 40,
  },
});

--- END FILE ---

>>> FILE: app/(tabs)/word-libraries.tsx (size: 19683 bytes)
--- BEGIN FILE ---
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, TextInput, Modal, Alert, ActivityIndicator } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { useState } from 'react';
import { BookOpen, Plus, CreditCard as Edit3, Trash2, Eye, X, ToggleLeft, ToggleRight } from 'lucide-react-native';
import { useWordLibraries } from '@/hooks/useGameData';
import { WordPair } from '@/types/game';
import { useTheme } from '@/hooks/useTheme';

export default function WordLibrariesScreen() {
  const { colors } = useTheme();
  const { 
    libraries, 
    loading, 
    error, 
    toggleLibrary, 
    addCustomWordPair, 
    deleteWordPair, 
    updateWordPair 
  } = useWordLibraries();

  const [showAddModal, setShowAddModal] = useState(false);
  const [showLibraryModal, setShowLibraryModal] = useState(false);
  const [selectedLibraryIndex, setSelectedLibraryIndex] = useState<number>(-1);
  const [newPair, setNewPair] = useState({ civilian: '', undercover: '', category: '' });
  const [editingPair, setEditingPair] = useState<WordPair | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleToggleLibrary = async (libraryId: string, currentState: boolean) => {
    try {
      await toggleLibrary(libraryId, !currentState);
    } catch (err) {
      Alert.alert('Error', 'Failed to update library status');
    }
  };

  const handleAddWordPair = async () => {
    if (!newPair.civilian.trim() || !newPair.undercover.trim()) {
      Alert.alert('Error', 'Please fill in both words');
      return;
    }

    try {
      setIsSubmitting(true);
      await addCustomWordPair(
        newPair.civilian.trim(),
        newPair.undercover.trim(),
        newPair.category.trim() || 'Custom'
      );
      
      setNewPair({ civilian: '', undercover: '', category: '' });
      setShowAddModal(false);
      Alert.alert('Success', 'Word pair added to Custom Pack!');
    } catch (err) {
      Alert.alert('Error', 'Failed to add word pair');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleEditWordPair = async () => {
    if (!editingPair || !editingPair.civilian_word.trim() || !editingPair.undercover_word.trim()) {
      Alert.alert('Error', 'Please fill in both words');
      return;
    }

    try {
      setIsSubmitting(true);
      await updateWordPair(
        editingPair.id,
        editingPair.civilian_word.trim(),
        editingPair.undercover_word.trim(),
        editingPair.category.trim()
      );
      
      setEditingPair(null);
      Alert.alert('Success', 'Word pair updated!');
    } catch (err) {
      Alert.alert('Error', 'Failed to update word pair');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDeleteWordPair = (pairId: string) => {
    Alert.alert(
      'Delete Word Pair',
      'Are you sure you want to delete this word pair?',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            try {
              await deleteWordPair(pairId);
              Alert.alert('Success', 'Word pair deleted');
            } catch (err) {
              Alert.alert('Error', 'Failed to delete word pair');
            }
          }
        }
      ]
    );
  };

  const getTotalActivePairs = () => {
    return libraries
      .filter(lib => lib.is_active)
      .reduce((total, lib) => total + lib.pairs.length, 0);
  };

  const selectedLibrary = selectedLibraryIndex >= 0 ? libraries[selectedLibraryIndex] : null;

  if (loading) {
    return (
      <View style={[styles.container, { backgroundColor: colors.background }]}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={colors.primary} />
          <Text style={[styles.loadingText, { color: colors.textSecondary }]}>Loading word libraries...</Text>
        </View>
      </View>
    );
  }

  if (error) {
    return (
      <View style={[styles.container, { backgroundColor: colors.background }]}>
        <View style={styles.errorContainer}>
          <Text style={[styles.errorText, { color: colors.error }]}>{error}</Text>
        </View>
      </View>
    );
  }

  return (
    <View style={[styles.container, { backgroundColor: colors.background }]}>
      <View style={styles.header}>
        <Text style={[styles.title, { color: colors.text }]}>📚 Word Libraries</Text>
        <Text style={[styles.subtitle, { color: colors.textSecondary }]}>Manage your word collections</Text>
      </View>

      <View style={[styles.statsCard, { backgroundColor: colors.surface }]}>
        <Text style={[styles.statsText, { color: colors.primary }]}>
          Active Word Pairs: {getTotalActivePairs()}
        </Text>
        <Text style={[styles.statsSubtext, { color: colors.textSecondary }]}>
          From {libraries.filter(lib => lib.is_active).length} active libraries
        </Text>
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {libraries.map((library, index) => (
          <View key={library.id} style={[styles.libraryCard, { backgroundColor: colors.surface, borderColor: colors.border }]}>
            <View style={styles.libraryHeader}>
              <View style={styles.libraryInfo}>
                <View style={styles.libraryTitleRow}>
                  <Text style={[styles.libraryName, { color: colors.text }]}>{library.name}</Text>
                  {library.is_official && (
                    <View style={[styles.officialBadge, { backgroundColor: colors.primary }]}>
                      <Text style={styles.officialBadgeText}>OFFICIAL</Text>
                    </View>
                  )}
                </View>
                <Text style={[styles.libraryCount, { color: colors.textSecondary }]}>
                  {library.pairs.length} pairs
                </Text>
                {library.description && (
                  <Text style={[styles.libraryDescription, { color: colors.textSecondary }]}>
                    {library.description}
                  </Text>
                )}
              </View>
              
              <View style={styles.libraryActions}>
                <TouchableOpacity
                  style={[styles.viewButton, { backgroundColor: `${colors.primary}20`, borderColor: colors.primary }]}
                  onPress={() => {
                    setSelectedLibraryIndex(index);
                    setShowLibraryModal(true);
                  }}
                >
                  <Eye size={16} color={colors.primary} />
                </TouchableOpacity>
                
                <TouchableOpacity
                  style={styles.toggleContainer}
                  onPress={() => handleToggleLibrary(library.id, library.is_active)}
                >
                  {library.is_active ? (
                    <ToggleRight size={24} color={colors.success} />
                  ) : (
                    <ToggleLeft size={24} color={colors.textSecondary} />
                  )}
                </TouchableOpacity>
              </View>
            </View>
          </View>
        ))}

        <TouchableOpacity
          style={[styles.addButton, { backgroundColor: colors.primary }]}
          onPress={() => setShowAddModal(true)}
        >
          <Plus size={20} color="white" />
          <Text style={[styles.addButtonText, { color: 'white' }]}>Add Custom Word Pair</Text>
        </TouchableOpacity>
      </ScrollView>

      {/* Add Word Pair Modal */}
      <Modal
        visible={showAddModal}
        animationType="slide"
        presentationStyle="pageSheet"
      >
        <LinearGradient
          colors={['#1F2937', '#111827']}
          style={styles.modalContainer}
        >
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Add Word Pair</Text>
            <TouchableOpacity onPress={() => setShowAddModal(false)}>
              <X size={24} color="#F3F4F6" />
            </TouchableOpacity>
          </View>

          <View style={styles.modalContent}>
            <Text style={styles.modalInstructions}>
              Create a pair of similar words that could confuse players
            </Text>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Civilian Word</Text>
              <TextInput
                style={styles.textInput}
                value={newPair.civilian}
                onChangeText={(text) => setNewPair({ ...newPair, civilian: text })}
                placeholder="e.g., Cat"
                placeholderTextColor="#9CA3AF"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Undercover Word</Text>
              <TextInput
                style={styles.textInput}
                value={newPair.undercover}
                onChangeText={(text) => setNewPair({ ...newPair, undercover: text })}
                placeholder="e.g., Dog"
                placeholderTextColor="#9CA3AF"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Category (Optional)</Text>
              <TextInput
                style={styles.textInput}
                value={newPair.category}
                onChangeText={(text) => setNewPair({ ...newPair, category: text })}
                placeholder="e.g., Animals"
                placeholderTextColor="#9CA3AF"
              />
            </View>

            <TouchableOpacity 
              style={[styles.saveButton, { opacity: isSubmitting ? 0.6 : 1 }]} 
              onPress={handleAddWordPair}
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <ActivityIndicator size="small" color="white" />
              ) : (
                <Text style={styles.saveButtonText}>Add Word Pair</Text>
              )}
            </TouchableOpacity>
          </View>
        </LinearGradient>
      </Modal>

      {/* Library View Modal */}
      <Modal
        visible={showLibraryModal}
        animationType="slide"
        presentationStyle="pageSheet"
      >
        <LinearGradient
          colors={['#1F2937', '#111827']}
          style={styles.modalContainer}
        >
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>{selectedLibrary?.name}</Text>
            <TouchableOpacity onPress={() => setShowLibraryModal(false)}>
              <X size={24} color="#F3F4F6" />
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.modalContent}>
            {selectedLibrary?.pairs.map((pair) => (
              <View key={pair.id} style={styles.wordPairCard}>
                <View style={styles.wordPairInfo}>
                  <Text style={styles.wordText}>
                    👥 {pair.civilian_word} vs 🕵️ {pair.undercover_word}
                  </Text>
                  <View style={styles.pairMetadata}>
                    <Text style={styles.categoryText}>
                      {pair.category}
                    </Text>
                    <Text style={styles.usageText}>
                      Used {pair.usage_count} times
                    </Text>
                  </View>
                </View>
                
                {!selectedLibrary.is_official && (
                  <View style={styles.wordPairActions}>
                    <TouchableOpacity
                      style={styles.editButton}
                      onPress={() => setEditingPair(pair)}
                    >
                      <Edit3 size={14} color="#8B5CF6" />
                    </TouchableOpacity>
                    
                    <TouchableOpacity
                      style={styles.deleteButton}
                      onPress={() => handleDeleteWordPair(pair.id)}
                    >
                      <Trash2 size={14} color="#EF4444" />
                    </TouchableOpacity>
                  </View>
                )}
              </View>
            ))}
            
            {selectedLibrary?.pairs.length === 0 && (
              <Text style={styles.emptyText}>
                No word pairs in this library yet.
              </Text>
            )}
          </ScrollView>
        </LinearGradient>
      </Modal>

      {/* Edit Word Pair Modal */}
      <Modal
        visible={!!editingPair}
        animationType="slide"
        presentationStyle="pageSheet"
      >
        <LinearGradient
          colors={['#1F2937', '#111827']}
          style={styles.modalContainer}
        >
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Edit Word Pair</Text>
            <TouchableOpacity onPress={() => setEditingPair(null)}>
              <X size={24} color="#F3F4F6" />
            </TouchableOpacity>
          </View>

          <View style={styles.modalContent}>
            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Civilian Word</Text>
              <TextInput
                style={styles.textInput}
                value={editingPair?.civilian_word || ''}
                onChangeText={(text) => setEditingPair(prev => prev ? { ...prev, civilian_word: text } : null)}
                placeholder="e.g., Cat"
                placeholderTextColor="#9CA3AF"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Undercover Word</Text>
              <TextInput
                style={styles.textInput}
                value={editingPair?.undercover_word || ''}
                onChangeText={(text) => setEditingPair(prev => prev ? { ...prev, undercover_word: text } : null)}
                placeholder="e.g., Dog"
                placeholderTextColor="#9CA3AF"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Category</Text>
              <TextInput
                style={styles.textInput}
                value={editingPair?.category || ''}
                onChangeText={(text) => setEditingPair(prev => prev ? { ...prev, category: text } : null)}
                placeholder="e.g., Animals"
                placeholderTextColor="#9CA3AF"
              />
            </View>

            <TouchableOpacity 
              style={[styles.saveButton, { opacity: isSubmitting ? 0.6 : 1 }]} 
              onPress={handleEditWordPair}
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <ActivityIndicator size="small" color="white" />
              ) : (
                <Text style={styles.saveButtonText}>Save Changes</Text>
              )}
            </TouchableOpacity>
          </View>
        </LinearGradient>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    gap: 16,
  },
  loadingText: {
    color: '#9CA3AF',
    fontSize: 16,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  errorText: {
    color: '#EF4444',
    fontSize: 16,
    textAlign: 'center',
  },
  header: {
    alignItems: 'center',
    paddingTop: 60,
    paddingBottom: 20,
    gap: 4,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#F3F4F6',
  },
  subtitle: {
    fontSize: 16,
    color: '#9CA3AF',
  },
  statsCard: {
    backgroundColor: '#374151',
    marginHorizontal: 20,
    marginBottom: 20,
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    gap: 4,
  },
  statsText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#8B5CF6',
  },
  statsSubtext: {
    fontSize: 12,
    color: '#9CA3AF',
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  libraryCard: {
    backgroundColor: '#374151',
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#4B5563',
  },
  libraryHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
  },
  libraryInfo: {
    flex: 1,
    marginRight: 12,
  },
  libraryTitleRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    marginBottom: 4,
  },
  libraryName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#F3F4F6',
  },
  officialBadge: {
    backgroundColor: '#8B5CF6',
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 4,
  },
  officialBadgeText: {
    fontSize: 10,
    color: 'white',
    fontWeight: 'bold',
  },
  libraryCount: {
    fontSize: 14,
    color: '#9CA3AF',
    marginBottom: 4,
  },
  libraryDescription: {
    fontSize: 12,
    color: '#6B7280',
    fontStyle: 'italic',
  },
  libraryActions: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  viewButton: {
    backgroundColor: 'rgba(139, 92, 246, 0.1)',
    padding: 8,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#8B5CF6',
  },
  toggleContainer: {
    padding: 4,
  },
  addButton: {
    backgroundColor: '#8B5CF6',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    padding: 16,
    borderRadius: 12,
    marginTop: 20,
    marginBottom: 40,
  },
  addButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  modalContainer: {
    flex: 1,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    paddingTop: 60,
    borderBottomWidth: 1,
    borderBottomColor: '#374151',
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#F3F4F6',
  },
  modalContent: {
    flex: 1,
    padding: 20,
  },
  modalInstructions: {
    fontSize: 14,
    color: '#9CA3AF',
    textAlign: 'center',
    marginBottom: 24,
    lineHeight: 20,
  },
  inputGroup: {
    marginBottom: 20,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#D1D5DB',
    marginBottom: 8,
  },
  textInput: {
    backgroundColor: '#374151',
    color: '#F3F4F6',
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#4B5563',
    fontSize: 16,
  },
  saveButton: {
    backgroundColor: '#8B5CF6',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    marginTop: 20,
  },
  saveButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  wordPairCard: {
    backgroundColor: '#1F2937',
    padding: 16,
    borderRadius: 8,
    marginBottom: 12,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  wordPairInfo: {
    flex: 1,
  },
  wordText: {
    fontSize: 16,
    color: '#F3F4F6',
    fontWeight: '500',
    marginBottom: 8,
  },
  pairMetadata: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  categoryText: {
    fontSize: 12,
    color: '#8B5CF6',
    fontWeight: '500',
  },
  usageText: {
    fontSize: 10,
    color: '#6B7280',
  },
  wordPairActions: {
    flexDirection: 'row',
    gap: 8,
  },
  editButton: {
    backgroundColor: 'rgba(139, 92, 246, 0.1)',
    padding: 8,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#8B5CF6',
  },
  deleteButton: {
    backgroundColor: 'rgba(239, 68, 68, 0.1)',
    padding: 8,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#EF4444',
  },
  emptyText: {
    color: '#9CA3AF',
    fontSize: 16,
    textAlign: 'center',
    fontStyle: 'italic',
    marginTop: 40,
  },
});

--- END FILE ---

>>> FILE: components/game/SpecialRoleModals.tsx (size: 9137 bytes)
--- BEGIN FILE ---
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Modal, ScrollView } from 'react-native';
import { X, Zap, Target, Heart, Scale, Ghost, Smile, Crown } from 'lucide-react-native';
import { Player } from '@/types/game';

interface SpecialRoleModalsProps {
  showRevengerModal: boolean;
  revengerPlayer: Player | null;
  players: Player[];
  onRevengerChoice: (targetId: string) => void;
  showSpecialRoleCard: boolean;
  currentSpecialRolePlayer: Player | null;
  onCloseSpecialRoleCard: () => void;
}

export const SpecialRoleModals: React.FC<SpecialRoleModalsProps> = ({
  showRevengerModal,
  revengerPlayer,
  players,
  onRevengerChoice,
  showSpecialRoleCard,
  currentSpecialRolePlayer,
  onCloseSpecialRoleCard,
}) => {
  const getSpecialRoleInfo = (role: string) => {
    switch (role) {
      case 'revenger':
        return {
          icon: Target,
          color: '#EF4444',
          title: 'Revenger',
          description: 'When eliminated, you can choose another player to eliminate with you.',
          ability: 'Chain Elimination'
        };
      case 'lovers':
        return {
          icon: Heart,
          color: '#EC4899',
          title: 'Lovers',
          description: 'If one lover is eliminated, the other lover is also eliminated.',
          ability: 'Shared Fate'
        };
      case 'goddess-of-justice':
        return {
          icon: Scale,
          color: '#8B5CF6',
          title: 'Goddess of Justice',
          description: 'When there is a tie in voting, you automatically break the tie.',
          ability: 'Tie Breaker'
        };
      case 'ghost':
        return {
          icon: Ghost,
          color: '#6B7280',
          title: 'Ghost',
          description: 'Even after elimination, you can still participate in voting.',
          ability: 'Posthumous Voting'
        };
      case 'mr-meme':
        return {
          icon: Smile,
          color: '#F59E0B',
          title: 'Mr. Meme',
          description: 'You can only communicate through gestures and miming - no verbal clues allowed!',
          ability: 'Silent Communication'
        };
      case 'joy-fool':
        return {
          icon: Crown,
          color: '#10B981',
          title: 'Joy Fool',
          description: 'If eliminated in the first round, you gain bonus points.',
          ability: 'Early Elimination Bonus'
        };
      default:
        return {
          icon: Zap,
          color: '#8B5CF6',
          title: 'Special Role',
          description: 'You have a special ability in this game.',
          ability: 'Unknown'
        };
    }
  };

  const alivePlayers = players.filter(p => p.isAlive && p.id !== revengerPlayer?.id);

  return (
    <>
      {/* Revenger Modal */}
      <Modal
        visible={showRevengerModal}
        transparent
        animationType="fade"
        onRequestClose={() => {}}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContainer}>
            <View style={styles.modalHeader}>
              <Target size={24} color="#EF4444" />
              <Text style={styles.modalTitle}>Revenger's Choice</Text>
            </View>
            
            <Text style={styles.modalDescription}>
              {revengerPlayer?.name} was eliminated! As the Revenger, choose another player to eliminate with you.
            </Text>
            
            <ScrollView style={styles.playersList}>
              {alivePlayers.map((player) => (
                <TouchableOpacity
                  key={player.id}
                  style={styles.playerOption}
                  onPress={() => onRevengerChoice(player.id)}
                >
                  <Text style={styles.playerOptionName}>{player.name}</Text>
                  <Text style={styles.playerOptionRole}>
                    {player.role === 'civilian' ? '👥' : player.role === 'undercover' ? '🕵️' : '❓'} 
                    {player.role}
                  </Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>
        </View>
      </Modal>

      {/* Special Role Card Modal */}
      <Modal
        visible={showSpecialRoleCard}
        transparent
        animationType="slide"
        onRequestClose={onCloseSpecialRoleCard}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.roleCardContainer}>
            <TouchableOpacity
              style={styles.closeButton}
              onPress={onCloseSpecialRoleCard}
            >
              <X size={24} color="#9CA3AF" />
            </TouchableOpacity>
            
            {currentSpecialRolePlayer?.specialRole && (() => {
              const roleInfo = getSpecialRoleInfo(currentSpecialRolePlayer.specialRole);
              const IconComponent = roleInfo.icon;
              
              return (
                <>
                  <View style={styles.roleCardHeader}>
                    <IconComponent size={32} color={roleInfo.color} />
                    <Text style={[styles.roleCardTitle, { color: roleInfo.color }]}>
                      {roleInfo.title}
                    </Text>
                  </View>
                  
                  <View style={styles.roleCardContent}>
                    <Text style={styles.roleCardDescription}>
                      {roleInfo.description}
                    </Text>
                    
                    <View style={styles.abilityBadge}>
                      <Zap size={16} color="#F59E0B" />
                      <Text style={styles.abilityText}>{roleInfo.ability}</Text>
                    </View>
                    
                    {currentSpecialRolePlayer.specialRole === 'mr-meme' && (
                      <View style={styles.warningBox}>
                        <Text style={styles.warningText}>
                          ⚠️ Remember: You can only use gestures and miming. No verbal clues allowed!
                        </Text>
                      </View>
                    )}
                    
                    {currentSpecialRolePlayer.specialRole === 'ghost' && !currentSpecialRolePlayer.isAlive && (
                      <View style={styles.infoBox}>
                        <Text style={styles.infoText}>
                          👻 You're eliminated but can still vote in future rounds!
                        </Text>
                      </View>
                    )}
                  </View>
                </>
              );
            })()}
          </View>
        </View>
      </Modal>
    </>
  );
};

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  modalContainer: {
    backgroundColor: '#374151',
    borderRadius: 16,
    padding: 24,
    width: '100%',
    maxWidth: 400,
    maxHeight: '80%',
  },
  modalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
    marginBottom: 16,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#F3F4F6',
  },
  modalDescription: {
    fontSize: 16,
    color: '#D1D5DB',
    lineHeight: 22,
    marginBottom: 20,
  },
  playersList: {
    maxHeight: 300,
  },
  playerOption: {
    backgroundColor: '#1F2937',
    padding: 16,
    borderRadius: 12,
    marginBottom: 8,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  playerOptionName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#F3F4F6',
  },
  playerOptionRole: {
    fontSize: 14,
    color: '#9CA3AF',
  },
  roleCardContainer: {
    backgroundColor: '#374151',
    borderRadius: 16,
    padding: 24,
    width: '100%',
    maxWidth: 400,
    position: 'relative',
  },
  closeButton: {
    position: 'absolute',
    top: 16,
    right: 16,
    padding: 8,
    zIndex: 1,
  },
  roleCardHeader: {
    alignItems: 'center',
    gap: 12,
    marginBottom: 24,
  },
  roleCardTitle: {
    fontSize: 24,
    fontWeight: 'bold',
  },
  roleCardContent: {
    gap: 16,
  },
  roleCardDescription: {
    fontSize: 16,
    color: '#D1D5DB',
    lineHeight: 22,
    textAlign: 'center',
  },
  abilityBadge: {
    backgroundColor: 'rgba(245, 158, 11, 0.1)',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#F59E0B',
  },
  abilityText: {
    color: '#F59E0B',
    fontSize: 14,
    fontWeight: '600',
  },
  warningBox: {
    backgroundColor: 'rgba(239, 68, 68, 0.1)',
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#EF4444',
  },
  warningText: {
    color: '#EF4444',
    fontSize: 14,
    textAlign: 'center',
    fontWeight: '500',
  },
  infoBox: {
    backgroundColor: 'rgba(107, 114, 128, 0.1)',
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#6B7280',
  },
  infoText: {
    color: '#6B7280',
    fontSize: 14,
    textAlign: 'center',
    fontWeight: '500',
  },
});

--- END FILE ---

>>> FILE: components/game/VotingPhase.tsx (size: 9464 bytes)
--- BEGIN FILE ---
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { Vote, Users, Clock, CircleCheck as CheckCircle } from 'lucide-react-native';
import { Player } from '@/types/game';

interface VotingPhaseProps {
  players: Player[];
  currentRound: number;
  currentVoter: Player | null;
  votingResults: Record<string, number>;
  individualVotes: Record<string, string>;
  isProcessingVotes: boolean;
  onCastVote: (targetId: string) => void;
  getVotingPlayers: () => Player[];
  getAlivePlayers: () => Player[];
}

export const VotingPhase: React.FC<VotingPhaseProps> = ({
  players,
  currentRound,
  currentVoter,
  votingResults,
  individualVotes,
  isProcessingVotes,
  onCastVote,
  getVotingPlayers,
  getAlivePlayers,
}) => {
  const votingPlayers = getVotingPlayers();
  const alivePlayers = getAlivePlayers();
  const votedCount = Object.keys(individualVotes).length;
  const totalVoters = votingPlayers.length;

  const getRoleColor = (role: string) => {
    switch (role) {
      case 'civilian': return '#10B981';
      case 'undercover': return '#EF4444';
      case 'mrwhite': return '#F59E0B';
      default: return '#6B7280';
    }
  };

  const getRoleName = (role: string) => {
    switch (role) {
      case 'civilian': return 'Civilian';
      case 'undercover': return 'Undercover';
      case 'mrwhite': return 'Mr. White';
      default: return 'Unknown';
    }
  };

  const getRoleEmoji = (role: string) => {
    switch (role) {
      case 'civilian': return '👥';
      case 'undercover': return '🕵️';
      case 'mrwhite': return '❓';
      default: return '❓';
    }
  };

  if (isProcessingVotes) {
    return (
      <LinearGradient colors={['#1F2937', '#111827']} style={styles.container}>
        <View style={styles.header}>
          <Text style={styles.title}>Processing Votes...</Text>
          <Text style={styles.subtitle}>Round {currentRound}</Text>
        </View>

        <View style={styles.centerContent}>
          <View style={styles.processingCard}>
            <Clock size={32} color="#8B5CF6" />
            <Text style={styles.processingText}>Counting votes and determining elimination...</Text>
          </View>
        </View>
      </LinearGradient>
    );
  }

  if (!currentVoter) {
    return (
      <LinearGradient colors={['#1F2937', '#111827']} style={styles.container}>
        <View style={styles.header}>
          <Text style={styles.title}>Voting Complete</Text>
          <Text style={styles.subtitle}>Round {currentRound}</Text>
        </View>
      </LinearGradient>
    );
  }

  return (
    <LinearGradient colors={['#1F2937', '#111827']} style={styles.container}>
      <View style={styles.header}>
        <Vote size={24} color="#8B5CF6" />
        <Text style={styles.title}>Voting Phase</Text>
        <Text style={styles.subtitle}>Round {currentRound}</Text>
      </View>

      <View style={styles.votingProgress}>
        <Text style={styles.progressText}>
          {votedCount} / {totalVoters} players have voted
        </Text>
        <View style={styles.progressBar}>
          <View 
            style={[
              styles.progressFill, 
              { width: `${(votedCount / totalVoters) * 100}%` }
            ]} 
          />
        </View>
      </View>

      <View style={styles.currentVoterCard}>
        <Text style={styles.currentVoterLabel}>Current Voter:</Text>
        <Text style={styles.currentVoterName}>{currentVoter.name}</Text>
        {currentVoter.specialRole && (
          <Text style={styles.specialRoleText}>
            ⚡ {currentVoter.specialRole.replace('-', ' ').toUpperCase()}
          </Text>
        )}
        <Text style={styles.votingInstructions}>
          Choose who you think should be eliminated
        </Text>
      </View>

      <ScrollView style={styles.playersContainer}>
        <Text style={styles.sectionTitle}>Vote to Eliminate:</Text>
        {alivePlayers.filter(player => player.id !== currentVoter.id).map((player) => {
          const voteCount = votingResults[player.id] || 0;
          const maxVotes = Math.max(...Object.values(votingResults));
          const hasMostVotes = voteCount > 0 && voteCount === maxVotes;
          
          return (
            <TouchableOpacity
              key={player.id}
              style={[
                styles.playerCard,
                hasMostVotes && styles.mostVotedPlayerCard
              ]}
              onPress={() => onCastVote(player.id)}
            >
              <View style={styles.playerInfo}>
                <Text style={styles.playerName}>{player.name}</Text>
              </View>
              
              <View style={styles.voteInfo}>
                {voteCount > 0 && (
                  <View style={styles.voteCount}>
                    <Text style={styles.voteCountText}>{voteCount}</Text>
                  </View>
                )}
                <Text style={styles.tapToVoteText}>Tap to vote</Text>
              </View>
            </TouchableOpacity>
          );
        })}
      </ScrollView>

      {votedCount > 0 && (
        <View style={styles.votingSummary}>
          <Text style={styles.summaryTitle}>Current Votes:</Text>
          <View style={styles.summaryList}>
            {Object.entries(votingResults)
              .sort(([,a], [,b]) => b - a)
              .map(([playerId, count]) => {
                const player = players.find(p => p.id === playerId);
                return player ? (
                  <View key={playerId} style={styles.summaryItem}>
                    <Text style={styles.summaryPlayerName}>{player.name}</Text>
                    <Text style={styles.summaryVoteCount}>{count} vote{count !== 1 ? 's' : ''}</Text>
                  </View>
                ) : null;
              })}
          </View>
        </View>
      )}
    </LinearGradient>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    alignItems: 'center',
    paddingTop: 60,
    paddingBottom: 20,
    gap: 4,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#F3F4F6',
  },
  subtitle: {
    fontSize: 16,
    color: '#9CA3AF',
  },
  votingProgress: {
    paddingHorizontal: 20,
    marginBottom: 20,
  },
  progressText: {
    fontSize: 14,
    color: '#D1D5DB',
    textAlign: 'center',
    marginBottom: 8,
  },
  progressBar: {
    height: 4,
    backgroundColor: '#374151',
    borderRadius: 2,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#8B5CF6',
  },
  currentVoterCard: {
    backgroundColor: '#374151',
    margin: 20,
    padding: 20,
    borderRadius: 12,
    alignItems: 'center',
    gap: 8,
  },
  currentVoterLabel: {
    fontSize: 14,
    color: '#9CA3AF',
  },
  currentVoterName: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#8B5CF6',
  },
  specialRoleText: {
    fontSize: 12,
    color: '#F59E0B',
    fontWeight: '600',
  },
  votingInstructions: {
    fontSize: 14,
    color: '#D1D5DB',
    textAlign: 'center',
    fontStyle: 'italic',
  },
  playersContainer: {
    flex: 1,
    paddingHorizontal: 20,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#F3F4F6',
    marginBottom: 12,
  },
  playerCard: {
    backgroundColor: '#374151',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 16,
    borderRadius: 12,
    marginBottom: 8,
  },
  currentVoterPlayerCard: {
    backgroundColor: '#1F2937',
    borderWidth: 1,
    borderColor: '#6B7280',
  },
  mostVotedPlayerCard: {
    backgroundColor: '#374151',
    borderWidth: 2,
    borderColor: '#EF4444',
  },
  playerInfo: {
    flex: 1,
    gap: 4,
  },
  playerName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#F3F4F6',
  },
  playerStatus: {
    fontSize: 12,
    color: '#9CA3AF',
    fontWeight: '500',
  },
  voteInfo: {
    alignItems: 'center',
    gap: 4,
  },
  voteCount: {
    backgroundColor: '#EF4444',
    borderRadius: 12,
    paddingHorizontal: 10,
    paddingVertical: 6,
    minWidth: 28,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  voteCountText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  tapToVoteText: {
    fontSize: 12,
    color: '#8B5CF6',
    fontWeight: '600',
  },
  cannotVoteText: {
    fontSize: 12,
    color: '#6B7280',
    fontStyle: 'italic',
  },
  votingSummary: {
    backgroundColor: '#374151',
    margin: 20,
    padding: 16,
    borderRadius: 12,
  },
  summaryTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#F3F4F6',
    marginBottom: 8,
  },
  summaryList: {
    gap: 4,
  },
  summaryItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  summaryPlayerName: {
    fontSize: 12,
    color: '#D1D5DB',
  },
  summaryVoteCount: {
    fontSize: 12,
    color: '#8B5CF6',
    fontWeight: '600',
  },
  centerContent: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  processingCard: {
    backgroundColor: '#374151',
    padding: 32,
    borderRadius: 16,
    alignItems: 'center',
    gap: 16,
  },
  processingText: {
    fontSize: 16,
    color: '#D1D5DB',
    textAlign: 'center',
  },
});

--- END FILE ---

>>> FILE: components/ui/GlassButton.tsx (size: 4874 bytes)
--- BEGIN FILE ---
import React from 'react';
import { TouchableOpacity, Text, StyleSheet, ViewStyle, TextStyle } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { BlurView } from 'expo-blur';

interface GlassButtonProps {
  title: string;
  onPress: () => void;
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'small' | 'medium' | 'large';
  disabled?: boolean;
  style?: ViewStyle;
  textStyle?: TextStyle;
  icon?: React.ReactNode;
}

export const GlassButton: React.FC<GlassButtonProps> = ({
  title,
  onPress,
  variant = 'primary',
  size = 'medium',
  disabled = false,
  style,
  textStyle,
  icon,
}) => {
  const getVariantColors = () => {
    switch (variant) {
      case 'primary':
        return {
          gradient: ['rgba(139, 92, 246, 0.3)', 'rgba(124, 58, 237, 0.2)'],
          border: 'rgba(139, 92, 246, 0.4)',
          text: '#FFFFFF',
        };
      case 'secondary':
        return {
          gradient: ['rgba(255, 255, 255, 0.15)', 'rgba(255, 255, 255, 0.05)'],
          border: 'rgba(255, 255, 255, 0.2)',
          text: '#F3F4F6',
        };
      case 'danger':
        return {
          gradient: ['rgba(239, 68, 68, 0.3)', 'rgba(220, 38, 38, 0.2)'],
          border: 'rgba(239, 68, 68, 0.4)',
          text: '#FFFFFF',
        };
      default:
        return {
          gradient: ['rgba(255, 255, 255, 0.15)', 'rgba(255, 255, 255, 0.05)'],
          border: 'rgba(255, 255, 255, 0.2)',
          text: '#F3F4F6',
        };
    }
  };

  const getSizeStyles = () => {
    switch (size) {
      case 'small':
        return { padding: 12, fontSize: 14, borderRadius: 12 };
      case 'large':
        return { padding: 20, fontSize: 18, borderRadius: 20 };
      default:
        return { padding: 16, fontSize: 16, borderRadius: 16 };
    }
  };

  const colors = getVariantColors();
  const sizeStyles = getSizeStyles();

  return (
    <TouchableOpacity
      style={[
        styles.container,
        {
          borderRadius: sizeStyles.borderRadius,
          opacity: disabled ? 0.5 : 1,
        },
        style,
      ]}
      onPress={onPress}
      disabled={disabled}
      activeOpacity={0.8}
    >
      <BlurView
        intensity={15}
        tint="dark"
        style={[styles.blurContainer, { borderRadius: sizeStyles.borderRadius }]}
      >
        <LinearGradient
          colors={colors.gradient}
          style={[styles.gradient, { borderRadius: sizeStyles.borderRadius }]}
        />
        <LinearGradient
          colors={['rgba(255, 255, 255, 0.1)', 'transparent']}
          style={[styles.highlight, { borderRadius: sizeStyles.borderRadius }]}
          start={{ x: 0, y: 0 }}
          end={{ x: 0, y: 0.5 }}
        />
        <LinearGradient
          colors={[colors.border, colors.border]}
          style={[styles.border, { borderRadius: sizeStyles.borderRadius }]}
        />
        <LinearGradient
          colors={['transparent', 'rgba(0, 0, 0, 0.1)']}
          style={[styles.innerShadow, { borderRadius: sizeStyles.borderRadius }]}
          start={{ x: 0, y: 0 }}
          end={{ x: 0, y: 1 }}
        />
        <LinearGradient
          colors={[
            'rgba(255, 255, 255, 0.05)',
            'transparent',
            'rgba(0, 0, 0, 0.05)',
          ]}
          style={[styles.content, { padding: sizeStyles.padding }]}
        >
          {icon && <LinearGradient colors={['transparent']} style={styles.icon}>{icon}</LinearGradient>}
          <Text
            style={[
              styles.text,
              {
                fontSize: sizeStyles.fontSize,
                color: colors.text,
              },
              textStyle,
            ]}
          >
            {title}
          </Text>
        </LinearGradient>
      </BlurView>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  container: {
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 12,
    elevation: 8,
  },
  blurContainer: {
    position: 'relative',
    overflow: 'hidden',
  },
  gradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  highlight: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    height: '50%',
  },
  border: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    borderWidth: 1,
  },
  innerShadow: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  content: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  icon: {
    // Icon styling if needed
  },
  text: {
    fontWeight: '600',
    textAlign: 'center',
    textShadowColor: 'rgba(0, 0, 0, 0.3)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 2,
  },
});

--- END FILE ---

>>> FILE: components/ui/GlassCard.tsx (size: 1627 bytes)
--- BEGIN FILE ---
import React from 'react';
import { View, ViewStyle, StyleSheet } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { BlurView } from 'expo-blur';

interface GlassCardProps {
  children: React.ReactNode;
  style?: ViewStyle;
  intensity?: number;
  tint?: 'light' | 'dark' | 'default';
  borderRadius?: number;
  padding?: number;
}

export const GlassCard: React.FC<GlassCardProps> = ({
  children,
  style,
  intensity = 20,
  tint = 'dark',
  borderRadius = 16,
  padding = 20,
}) => {
  return (
    <View style={[styles.container, { borderRadius }, style]}>
      <BlurView
        intensity={intensity}
        tint={tint}
        style={[styles.blurContainer, { borderRadius, padding }]}
      >
        <LinearGradient
          colors={[
            'rgba(255, 255, 255, 0.15)',
            'rgba(255, 255, 255, 0.05)',
          ]}
          style={[styles.gradient, { borderRadius }]}
        />
        <View style={styles.border} />
        {children}
      </BlurView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 8,
    },
    shadowOpacity: 0.25,
    shadowRadius: 24,
    elevation: 12,
  },
  blurContainer: {
    position: 'relative',
    overflow: 'hidden',
  },
  gradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  border: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
    borderRadius: 16,
  },
});

--- END FILE ---

>>> FILE: components/ui/GlassModal.tsx (size: 2964 bytes)
--- BEGIN FILE ---
import React from 'react';
import { Modal, View, StyleSheet, TouchableOpacity, Dimensions } from 'react-native';
import { BlurView } from 'expo-blur';
import { LinearGradient } from 'expo-linear-gradient';

interface GlassModalProps {
  visible: boolean;
  onClose: () => void;
  children: React.ReactNode;
  animationType?: 'slide' | 'fade' | 'none';
  presentationStyle?: 'fullScreen' | 'pageSheet' | 'formSheet' | 'overFullScreen';
}

const { width, height } = Dimensions.get('window');

export const GlassModal: React.FC<GlassModalProps> = ({
  visible,
  onClose,
  children,
  animationType = 'slide',
  presentationStyle = 'overFullScreen',
}) => {
  return (
    <Modal
      visible={visible}
      animationType={animationType}
      presentationStyle={presentationStyle}
      transparent={true}
      onRequestClose={onClose}
    >
      <BlurView intensity={20} tint="dark" style={styles.overlay}>
        <TouchableOpacity
          style={styles.backdrop}
          activeOpacity={1}
          onPress={onClose}
        />
        <View style={styles.modalContainer}>
          <BlurView intensity={25} tint="dark" style={styles.modalContent}>
            <LinearGradient
              colors={[
                'rgba(255, 255, 255, 0.15)',
                'rgba(255, 255, 255, 0.05)',
              ]}
              style={styles.gradient}
            />
            <LinearGradient
              colors={['rgba(255, 255, 255, 0.1)', 'transparent']}
              style={styles.highlight}
              start={{ x: 0, y: 0 }}
              end={{ x: 0, y: 0.3 }}
            />
            <View style={styles.border} />
            <View style={styles.contentWrapper}>
              {children}
            </View>
          </BlurView>
        </View>
      </BlurView>
    </Modal>
  );
};

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.4)',
  },
  backdrop: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  modalContainer: {
    width: width * 0.9,
    maxWidth: 400,
    maxHeight: height * 0.8,
    borderRadius: 24,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 16,
    },
    shadowOpacity: 0.4,
    shadowRadius: 32,
    elevation: 20,
  },
  modalContent: {
    flex: 1,
    position: 'relative',
    borderRadius: 24,
    overflow: 'hidden',
  },
  gradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    borderRadius: 24,
  },
  highlight: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    height: '30%',
    borderRadius: 24,
  },
  border: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
    borderRadius: 24,
  },
  contentWrapper: {
    flex: 1,
    padding: 24,
  },
});

--- END FILE ---

>>> FILE: components/ui/aceternity-button.tsx (size: 4630 bytes)
--- BEGIN FILE ---
import React from 'react';
import { TouchableOpacity, Text, StyleSheet, ViewStyle, TextStyle, ActivityIndicator } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { useTheme } from '@/hooks/useTheme';

interface AceternityButtonProps {
  children: React.ReactNode;
  onPress: () => void;
  variant?: 'default' | 'shimmer' | 'glow' | 'outline' | 'ghost' | 'destructive';
  size?: 'sm' | 'md' | 'lg' | 'xl';
  disabled?: boolean;
  loading?: boolean;
  style?: ViewStyle;
  textStyle?: TextStyle;
  icon?: React.ReactNode;
}

export const AceternityButton: React.FC<AceternityButtonProps> = ({
  children,
  onPress,
  variant = 'default',
  size = 'md',
  disabled = false,
  loading = false,
  style,
  textStyle,
  icon,
}) => {
  const { theme, colors } = useTheme();

  const getSizeStyles = () => {
    switch (size) {
      case 'sm':
        return { padding: 12, fontSize: 14, borderRadius: 12, minHeight: 40 };
      case 'lg':
        return { padding: 20, fontSize: 18, borderRadius: 16, minHeight: 56 };
      case 'xl':
        return { padding: 24, fontSize: 20, borderRadius: 20, minHeight: 64 };
      default:
        return { padding: 16, fontSize: 16, borderRadius: 14, minHeight: 48 };
    }
  };

  const getVariantStyles = () => {
    switch (variant) {
      case 'shimmer':
        return {
          colors: theme === 'dark' 
            ? ['#60A5FA', '#818CF8', '#A78BFA']
            : ['#3B82F6', '#6366F1', '#8B5CF6'],
          textColor: '#FFFFFF',
          shadowColor: colors.primary,
        };
      case 'glow':
        return {
          colors: theme === 'dark'
            ? ['#10B981', '#34D399', '#6EE7B7']
            : ['#059669', '#10B981', '#34D399'],
          textColor: '#FFFFFF',
          shadowColor: colors.success,
        };
      case 'outline':
        return {
          colors: ['transparent', 'transparent'],
          textColor: colors.primary,
          border: true,
          borderColor: colors.primary,
        };
      case 'ghost':
        return {
          colors: ['transparent', 'transparent'],
          textColor: colors.text,
          border: false,
        };
      case 'destructive':
        return {
          colors: theme === 'dark'
            ? ['#F87171', '#EF4444', '#DC2626']
            : ['#EF4444', '#DC2626', '#B91C1C'],
          textColor: '#FFFFFF',
          shadowColor: colors.error,
        };
      default:
        return {
          colors: theme === 'dark'
            ? ['#334155', '#475569', '#64748B']
            : ['#F1F5F9', '#E2E8F0', '#CBD5E1'],
          textColor: colors.text,
          shadowColor: colors.primary,
        };
    }
  };

  const variantStyles = getVariantStyles();
  const sizeStyles = getSizeStyles();

  const buttonContent = (
    <>
      {loading ? (
        <ActivityIndicator size="small" color={variantStyles.textColor} />
      ) : (
        <>
          {icon && <>{icon}</>}
          <Text style={[
            styles.text,
            {
              fontSize: sizeStyles.fontSize,
              color: variantStyles.textColor,
              opacity: disabled ? 0.6 : 1,
            },
            textStyle,
          ]}>
            {children}
          </Text>
        </>
      )}
    </>
  );

  return (
    <TouchableOpacity
      style={[
        styles.container,
        {
          borderRadius: sizeStyles.borderRadius,
          opacity: disabled ? 0.6 : 1,
          minHeight: sizeStyles.minHeight,
          shadowColor: variantStyles.shadowColor,
          shadowOffset: { width: 0, height: 4 },
          shadowOpacity: disabled ? 0 : (variant === 'glow' ? 0.4 : 0.2),
          shadowRadius: variant === 'glow' ? 16 : 8,
          elevation: disabled ? 0 : 6,
        },
        variantStyles.border && {
          borderWidth: 2,
          borderColor: variantStyles.borderColor,
        },
        style,
      ]}
      onPress={onPress}
      disabled={disabled || loading}
      activeOpacity={0.8}
    >
      <LinearGradient
        colors={variantStyles.colors}
        style={[
          styles.gradient,
          {
            padding: sizeStyles.padding,
            borderRadius: sizeStyles.borderRadius,
            minHeight: sizeStyles.minHeight,
          },
        ]}
      >
        {buttonContent}
      </LinearGradient>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  container: {
    overflow: 'hidden',
  },
  gradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 12,
  },
  text: {
    fontWeight: '600',
    textAlign: 'center',
  },
});

--- END FILE ---

>>> FILE: components/ui/aceternity-card.tsx (size: 3636 bytes)
--- BEGIN FILE ---
import React from 'react';
import { View, ViewStyle } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { BlurView } from 'expo-blur';
import { useTheme } from '@/hooks/useTheme';

interface AceternityCardProps {
  children: React.ReactNode;
  style?: ViewStyle;
  variant?: 'default' | 'glass' | 'gradient' | 'spotlight' | 'border';
  className?: string;
}

export const AceternityCard: React.FC<AceternityCardProps> = ({ 
  children, 
  style, 
  variant = 'default',
  className 
}) => {
  const { theme, colors } = useTheme();

  const baseStyle = {
    borderRadius: 20,
    padding: 24,
    shadowColor: theme === 'dark' ? '#000' : '#000',
    shadowOffset: { width: 0, height: 8 },
    shadowOpacity: theme === 'dark' ? 0.3 : 0.1,
    shadowRadius: 24,
    elevation: 8,
  };

  if (variant === 'glass') {
    return (
      <View style={[baseStyle, style]}>
        <BlurView 
          intensity={theme === 'dark' ? 30 : 20} 
          tint={theme === 'dark' ? 'dark' : 'light'} 
          style={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            borderRadius: 20,
          }} 
        />
        <LinearGradient
          colors={theme === 'dark' 
            ? ['rgba(30, 41, 59, 0.8)', 'rgba(15, 23, 42, 0.9)']
            : ['rgba(248, 250, 252, 0.8)', 'rgba(241, 245, 249, 0.9)']
          }
          style={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            borderRadius: 20,
          }}
        />
        <View style={{
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          borderWidth: 1,
          borderColor: theme === 'dark' ? 'rgba(148, 163, 184, 0.2)' : 'rgba(203, 213, 225, 0.3)',
          borderRadius: 20,
        }} />
        <View style={{ position: 'relative', zIndex: 1 }}>
          {children}
        </View>
      </View>
    );
  }

  if (variant === 'gradient') {
    return (
      <LinearGradient
        colors={theme === 'dark'
          ? ['#1E293B', '#334155', '#475569']
          : ['#F1F5F9', '#E2E8F0', '#CBD5E1']
        }
        style={[baseStyle, style]}
      >
        {children}
      </LinearGradient>
    );
  }

  if (variant === 'spotlight') {
    return (
      <View style={[
        baseStyle,
        {
          backgroundColor: colors.surface,
          borderWidth: 1,
          borderColor: colors.border,
          position: 'relative',
          overflow: 'hidden',
        },
        style
      ]}>
        <LinearGradient
          colors={theme === 'dark'
            ? ['rgba(96, 165, 250, 0.1)', 'transparent', 'rgba(139, 92, 246, 0.1)']
            : ['rgba(59, 130, 246, 0.1)', 'transparent', 'rgba(139, 92, 246, 0.1)']
          }
          style={{
            position: 'absolute',
            top: -50,
            left: -50,
            right: -50,
            height: 100,
            transform: [{ rotate: '45deg' }],
          }}
        />
        {children}
      </View>
    );
  }

  if (variant === 'border') {
    return (
      <View style={[
        baseStyle,
        {
          backgroundColor: colors.surface,
          borderWidth: 2,
          borderColor: colors.primary,
          shadowColor: colors.primary,
          shadowOpacity: 0.2,
        },
        style
      ]}>
        {children}
      </View>
    );
  }

  return (
    <View style={[
      baseStyle,
      { backgroundColor: colors.surface },
      style
    ]}>
      {children}
    </View>
  );
};

--- END FILE ---

>>> FILE: components/ui/badge.tsx (size: 1479 bytes)
--- BEGIN FILE ---
import React from 'react';
import { View, Text, StyleSheet, ViewStyle } from 'react-native';

interface BadgeProps {
  children: React.ReactNode;
  variant?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'destructive';
  style?: ViewStyle;
}

export const Badge: React.FC<BadgeProps> = ({
  children,
  variant = 'default',
  style,
}) => {
  const getVariantStyles = () => {
    switch (variant) {
      case 'primary':
        return { backgroundColor: '#8B5CF6', color: '#FFFFFF' };
      case 'secondary':
        return { backgroundColor: '#6B7280', color: '#FFFFFF' };
      case 'success':
        return { backgroundColor: '#10B981', color: '#FFFFFF' };
      case 'warning':
        return { backgroundColor: '#F59E0B', color: '#FFFFFF' };
      case 'destructive':
        return { backgroundColor: '#EF4444', color: '#FFFFFF' };
      default:
        return { backgroundColor: '#374151', color: '#F3F4F6' };
    }
  };

  const variantStyles = getVariantStyles();

  return (
    <View style={[
      styles.badge,
      { backgroundColor: variantStyles.backgroundColor },
      style,
    ]}>
      <Text style={[
        styles.text,
        { color: variantStyles.color },
      ]}>
        {children}
      </Text>
    </View>
  );
};

const styles = StyleSheet.create({
  badge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    alignSelf: 'flex-start',
  },
  text: {
    fontSize: 12,
    fontWeight: '600',
  },
});

--- END FILE ---

>>> FILE: components/ui/button.tsx (size: 3148 bytes)
--- BEGIN FILE ---
import React from 'react';
import { TouchableOpacity, Text, StyleSheet, ViewStyle, TextStyle } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';

interface ButtonProps {
  children: React.ReactNode;
  onPress: () => void;
  variant?: 'default' | 'primary' | 'secondary' | 'ghost' | 'destructive';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  style?: ViewStyle;
  textStyle?: TextStyle;
  icon?: React.ReactNode;
}

export const Button: React.FC<ButtonProps> = ({
  children,
  onPress,
  variant = 'default',
  size = 'md',
  disabled = false,
  style,
  textStyle,
  icon,
}) => {
  const getVariantStyles = () => {
    switch (variant) {
      case 'primary':
        return {
          colors: ['#8B5CF6', '#7C3AED'],
          textColor: '#FFFFFF',
        };
      case 'secondary':
        return {
          colors: ['#374151', '#4B5563'],
          textColor: '#F3F4F6',
        };
      case 'ghost':
        return {
          colors: ['transparent', 'transparent'],
          textColor: '#8B5CF6',
          border: true,
        };
      case 'destructive':
        return {
          colors: ['#EF4444', '#DC2626'],
          textColor: '#FFFFFF',
        };
      default:
        return {
          colors: ['#6B7280', '#9CA3AF'],
          textColor: '#FFFFFF',
        };
    }
  };

  const getSizeStyles = () => {
    switch (size) {
      case 'sm':
        return { padding: 12, fontSize: 14, borderRadius: 8 };
      case 'lg':
        return { padding: 20, fontSize: 18, borderRadius: 12 };
      default:
        return { padding: 16, fontSize: 16, borderRadius: 10 };
    }
  };

  const variantStyles = getVariantStyles();
  const sizeStyles = getSizeStyles();

  const buttonContent = (
    <>
      {icon && <>{icon}</>}
      <Text style={[
        styles.text,
        {
          fontSize: sizeStyles.fontSize,
          color: variantStyles.textColor,
          opacity: disabled ? 0.5 : 1,
        },
        textStyle,
      ]}>
        {children}
      </Text>
    </>
  );

  return (
    <TouchableOpacity
      style={[
        styles.container,
        {
          borderRadius: sizeStyles.borderRadius,
          opacity: disabled ? 0.5 : 1,
        },
        variantStyles.border && {
          borderWidth: 1,
          borderColor: '#8B5CF6',
        },
        style,
      ]}
      onPress={onPress}
      disabled={disabled}
      activeOpacity={0.8}
    >
      <LinearGradient
        colors={variantStyles.colors}
        style={[
          styles.gradient,
          {
            padding: sizeStyles.padding,
            borderRadius: sizeStyles.borderRadius,
          },
        ]}
      >
        {buttonContent}
      </LinearGradient>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  container: {
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  gradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  text: {
    fontWeight: '600',
    textAlign: 'center',
  },
});

--- END FILE ---

>>> FILE: components/ui/card.tsx (size: 1268 bytes)
--- BEGIN FILE ---
import React from 'react';
import { View, ViewStyle } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';

interface CardProps {
  children: React.ReactNode;
  style?: ViewStyle;
  variant?: 'default' | 'glass' | 'gradient';
  className?: string;
}

export const Card: React.FC<CardProps> = ({ 
  children, 
  style, 
  variant = 'default',
  className 
}) => {
  const baseStyle = {
    borderRadius: 16,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 12,
    elevation: 4,
  };

  if (variant === 'gradient') {
    return (
      <LinearGradient
        colors={['rgba(139, 92, 246, 0.1)', 'rgba(59, 130, 246, 0.05)']}
        style={[baseStyle, style]}
      >
        {children}
      </LinearGradient>
    );
  }

  if (variant === 'glass') {
    return (
      <View style={[
        baseStyle,
        {
          backgroundColor: 'rgba(255, 255, 255, 0.1)',
          borderWidth: 1,
          borderColor: 'rgba(255, 255, 255, 0.2)',
        },
        style
      ]}>
        {children}
      </View>
    );
  }

  return (
    <View style={[
      baseStyle,
      { backgroundColor: '#374151' },
      style
    ]}>
      {children}
    </View>
  );
};

--- END FILE ---

>>> FILE: components/ui/input.tsx (size: 1218 bytes)
--- BEGIN FILE ---
import React from 'react';
import { TextInput, View, Text, StyleSheet, TextInputProps, ViewStyle } from 'react-native';

interface InputProps extends TextInputProps {
  label?: string;
  error?: string;
  containerStyle?: ViewStyle;
}

export const Input: React.FC<InputProps> = ({
  label,
  error,
  containerStyle,
  style,
  ...props
}) => {
  return (
    <View style={[styles.container, containerStyle]}>
      {label && <Text style={styles.label}>{label}</Text>}
      <TextInput
        style={[
          styles.input,
          error && styles.inputError,
          style,
        ]}
        placeholderTextColor="#9CA3AF"
        {...props}
      />
      {error && <Text style={styles.error}>{error}</Text>}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    marginBottom: 16,
  },
  label: {
    fontSize: 14,
    fontWeight: '600',
    color: '#F3F4F6',
    marginBottom: 8,
  },
  input: {
    backgroundColor: '#374151',
    borderWidth: 1,
    borderColor: '#4B5563',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    color: '#F3F4F6',
  },
  inputError: {
    borderColor: '#EF4444',
  },
  error: {
    fontSize: 12,
    color: '#EF4444',
    marginTop: 4,
  },
});

--- END FILE ---

>>> FILE: components/ui/modern-badge.tsx (size: 3571 bytes)
--- BEGIN FILE ---
import React from 'react';
import { View, Text, StyleSheet, ViewStyle } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';

interface ModernBadgeProps {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'success' | 'warning' | 'destructive' | 'info';
  size?: 'sm' | 'md' | 'lg';
  style?: ViewStyle;
  gradient?: boolean;
}

export const ModernBadge: React.FC<ModernBadgeProps> = ({
  children,
  variant = 'primary',
  size = 'md',
  style,
  gradient = false,
}) => {
  const getVariantStyles = () => {
    switch (variant) {
      case 'primary':
        return { 
          backgroundColor: '#667eea', 
          color: '#FFFFFF',
          gradientColors: ['#667eea', '#764ba2']
        };
      case 'secondary':
        return { 
          backgroundColor: '#1a1a2e', 
          color: '#FFFFFF',
          gradientColors: ['#1a1a2e', '#16213e']
        };
      case 'success':
        return { 
          backgroundColor: '#11998e', 
          color: '#FFFFFF',
          gradientColors: ['#11998e', '#38ef7d']
        };
      case 'warning':
        return { 
          backgroundColor: '#feca57', 
          color: '#FFFFFF',
          gradientColors: ['#feca57', '#f39c12']
        };
      case 'destructive':
        return { 
          backgroundColor: '#ff6b6b', 
          color: '#FFFFFF',
          gradientColors: ['#ff6b6b', '#ee5a52']
        };
      case 'info':
        return { 
          backgroundColor: '#667eea', 
          color: '#FFFFFF',
          gradientColors: ['#667eea', '#764ba2']
        };
      default:
        return { 
          backgroundColor: '#2d3748', 
          color: '#FFFFFF',
          gradientColors: ['#2d3748', '#4a5568']
        };
    }
  };

  const getSizeStyles = () => {
    switch (size) {
      case 'sm':
        return { paddingHorizontal: 8, paddingVertical: 4, fontSize: 11, borderRadius: 8 };
      case 'lg':
        return { paddingHorizontal: 16, paddingVertical: 8, fontSize: 14, borderRadius: 12 };
      default:
        return { paddingHorizontal: 12, paddingVertical: 6, fontSize: 12, borderRadius: 10 };
    }
  };

  const variantStyles = getVariantStyles();
  const sizeStyles = getSizeStyles();

  const content = (
    <Text style={[
      styles.text,
      {
        color: variantStyles.color,
        fontSize: sizeStyles.fontSize,
      },
    ]}>
      {children}
    </Text>
  );

  if (gradient) {
    return (
      <LinearGradient
        colors={variantStyles.gradientColors}
        style={[
          styles.badge,
          {
            paddingHorizontal: sizeStyles.paddingHorizontal,
            paddingVertical: sizeStyles.paddingVertical,
            borderRadius: sizeStyles.borderRadius,
          },
          style,
        ]}
      >
        {content}
      </LinearGradient>
    );
  }

  return (
    <View style={[
      styles.badge,
      {
        backgroundColor: variantStyles.backgroundColor,
        paddingHorizontal: sizeStyles.paddingHorizontal,
        paddingVertical: sizeStyles.paddingVertical,
        borderRadius: sizeStyles.borderRadius,
      },
      style,
    ]}>
      {content}
    </View>
  );
};

const styles = StyleSheet.create({
  badge: {
    alignSelf: 'flex-start',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 3,
  },
  text: {
    fontWeight: '600',
    textAlign: 'center',
    textShadowColor: 'rgba(0, 0, 0, 0.3)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 1,
  },
});

--- END FILE ---

>>> FILE: components/ui/modern-button.tsx (size: 4237 bytes)
--- BEGIN FILE ---
import React from 'react';
import { TouchableOpacity, Text, StyleSheet, ViewStyle, TextStyle, ActivityIndicator } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { BlurView } from 'expo-blur';

interface ModernButtonProps {
  children: React.ReactNode;
  onPress: () => void;
  variant?: 'primary' | 'secondary' | 'ghost' | 'destructive' | 'success';
  size?: 'sm' | 'md' | 'lg' | 'xl';
  disabled?: boolean;
  loading?: boolean;
  style?: ViewStyle;
  textStyle?: TextStyle;
  icon?: React.ReactNode;
}

export const ModernButton: React.FC<ModernButtonProps> = ({
  children,
  onPress,
  variant = 'primary',
  size = 'md',
  disabled = false,
  loading = false,
  style,
  textStyle,
  icon,
}) => {
  const getVariantStyles = () => {
    switch (variant) {
      case 'primary':
        return {
          colors: ['#667eea', '#764ba2'],
          textColor: '#FFFFFF',
          shadowColor: '#667eea',
        };
      case 'secondary':
        return {
          colors: ['#1a1a2e', '#16213e'],
          textColor: '#FFFFFF',
          shadowColor: '#667eea',
        };
      case 'ghost':
        return {
          colors: ['transparent', 'transparent'],
          textColor: '#667eea',
          border: true,
          borderColor: '#667eea',
        };
      case 'destructive':
        return {
          colors: ['#ff6b6b', '#ee5a52'],
          textColor: '#FFFFFF',
          shadowColor: '#ff6b6b',
        };
      case 'success':
        return {
          colors: ['#11998e', '#38ef7d'],
          textColor: '#FFFFFF',
          shadowColor: '#11998e',
        };
      default:
        return {
          colors: ['#2d3748', '#4a5568'],
          textColor: '#FFFFFF',
          shadowColor: '#667eea',
        };
    }
  };

  const getSizeStyles = () => {
    switch (size) {
      case 'sm':
        return { padding: 12, fontSize: 14, borderRadius: 12, minHeight: 40 };
      case 'lg':
        return { padding: 20, fontSize: 18, borderRadius: 16, minHeight: 56 };
      case 'xl':
        return { padding: 24, fontSize: 20, borderRadius: 20, minHeight: 64 };
      default:
        return { padding: 16, fontSize: 16, borderRadius: 14, minHeight: 48 };
    }
  };

  const variantStyles = getVariantStyles();
  const sizeStyles = getSizeStyles();

  const buttonContent = (
    <>
      {loading ? (
        <ActivityIndicator size="small" color={variantStyles.textColor} />
      ) : (
        <>
          {icon && <>{icon}</>}
          <Text style={[
            styles.text,
            {
              fontSize: sizeStyles.fontSize,
              color: variantStyles.textColor,
              opacity: disabled ? 0.6 : 1,
            },
            textStyle,
          ]}>
            {children}
          </Text>
        </>
      )}
    </>
  );

  return (
    <TouchableOpacity
      style={[
        styles.container,
        {
          borderRadius: sizeStyles.borderRadius,
          opacity: disabled ? 0.6 : 1,
          minHeight: sizeStyles.minHeight,
          shadowColor: variantStyles.shadowColor,
          shadowOffset: { width: 0, height: 4 },
          shadowOpacity: disabled ? 0 : 0.3,
          shadowRadius: 12,
          elevation: disabled ? 0 : 6,
        },
        variantStyles.border && {
          borderWidth: 2,
          borderColor: variantStyles.borderColor,
        },
        style,
      ]}
      onPress={onPress}
      disabled={disabled || loading}
      activeOpacity={0.8}
    >
      <LinearGradient
        colors={variantStyles.colors}
        style={[
          styles.gradient,
          {
            padding: sizeStyles.padding,
            borderRadius: sizeStyles.borderRadius,
            minHeight: sizeStyles.minHeight,
          },
        ]}
      >
        {buttonContent}
      </LinearGradient>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  container: {
    overflow: 'hidden',
  },
  gradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 12,
  },
  text: {
    fontWeight: '600',
    textAlign: 'center',
    textShadowColor: 'rgba(0, 0, 0, 0.3)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 2,
  },
});

--- END FILE ---

>>> FILE: components/ui/modern-card.tsx (size: 2989 bytes)
--- BEGIN FILE ---
import React from 'react';
import { View, ViewStyle } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { BlurView } from 'expo-blur';

interface ModernCardProps {
  children: React.ReactNode;
  style?: ViewStyle;
  variant?: 'glass' | 'gradient' | 'solid' | 'elevated';
  className?: string;
}

export const ModernCard: React.FC<ModernCardProps> = ({ 
  children, 
  style, 
  variant = 'glass',
  className 
}) => {
  const baseStyle = {
    borderRadius: 20,
    padding: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 8 },
    shadowOpacity: 0.15,
    shadowRadius: 24,
    elevation: 8,
  };

  const getVariantStyles = () => {
    switch (variant) {
      case 'glass':
        return {
          gradient: ['rgba(15, 15, 35, 0.85)', 'rgba(26, 26, 46, 0.9)'],
          border: 'rgba(102, 126, 234, 0.3)',
          backdrop: true,
        };
      case 'gradient':
        return {
          gradient: ['#1a1a2e', '#16213e', '#0f3460', '#533483'],
          border: 'transparent',
        };
      case 'elevated':
        return {
          gradient: ['#0f0f23', '#1a1a2e'],
          border: 'rgba(102, 126, 234, 0.4)',
        };
      default:
        return {
          gradient: ['#0f0f23', '#1a1a2e'],
          border: 'transparent',
        };
    }
  };

  if (variant === 'glass') {
    const styles = getVariantStyles();
    return (
      <View style={[baseStyle, style]}>
        <BlurView intensity={25} tint="dark" style={{
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          borderRadius: 20,
        }} />
        <LinearGradient
          colors={styles.gradient}
          style={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            borderRadius: 20,
          }}
        />
        <View style={{
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          borderWidth: 1,
          borderColor: styles.border,
          borderRadius: 20,
        }} />
        <View style={{ position: 'relative', zIndex: 1 }}>
          {children}
        </View>
      </View>
    );
  }

  if (variant === 'gradient') {
    const styles = getVariantStyles();
    return (
      <LinearGradient
        colors={styles.gradient}
        style={[baseStyle, style]}
      >
        {children}
      </LinearGradient>
    );
  }

  if (variant === 'elevated') {
    const styles = getVariantStyles();
    return (
      <View style={[
        baseStyle,
        {
          backgroundColor: '#0f0f23',
          borderWidth: 1,
          borderColor: styles.border,
          shadowOpacity: 0.3,
        },
        style
      ]}>
        {children}
      </View>
    );
  }

  return (
    <View style={[
      baseStyle,
      { backgroundColor: '#0a0a1a' },
      style
    ]}>
      {children}
    </View>
  );
};

--- END FILE ---

>>> FILE: components/ui/modern-input.tsx (size: 3065 bytes)
--- BEGIN FILE ---
import React, { useState } from 'react';
import { TextInput, View, Text, StyleSheet, TextInputProps, ViewStyle } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';

interface ModernInputProps extends TextInputProps {
  label?: string;
  error?: string;
  variant?: 'default' | 'glass' | 'minimal';
  containerStyle?: ViewStyle;
}

export const ModernInput: React.FC<ModernInputProps> = ({
  label,
  error,
  variant = 'default',
  containerStyle,
  style,
  onFocus,
  onBlur,
  ...props
}) => {
  const [isFocused, setIsFocused] = useState(false);

  const handleFocus = (e: any) => {
    setIsFocused(true);
    onFocus?.(e);
  };

  const handleBlur = (e: any) => {
    setIsFocused(false);
    onBlur?.(e);
  };

  const getInputStyle = () => {
    const baseStyle = {
      borderRadius: 16,
      padding: 16,
      fontSize: 16,
      color: '#E2E8F0',
      minHeight: 56,
    };

    if (variant === 'glass') {
      return {
        ...baseStyle,
        backgroundColor: 'rgba(15, 15, 35, 0.8)',
        borderWidth: 1,
        borderColor: isFocused ? '#667eea' : 'rgba(102, 126, 234, 0.3)',
      };
    }

    if (variant === 'minimal') {
      return {
        ...baseStyle,
        backgroundColor: 'transparent',
        borderBottomWidth: 2,
        borderBottomColor: isFocused ? '#667eea' : 'rgba(102, 126, 234, 0.5)',
        borderRadius: 0,
        paddingHorizontal: 0,
      };
    }

    return {
      ...baseStyle,
      backgroundColor: 'rgba(15, 15, 35, 0.9)',
      borderWidth: 2,
      borderColor: error ? '#ff6b6b' : (isFocused ? '#667eea' : 'rgba(102, 126, 234, 0.4)'),
    };
  };

  return (
    <View style={[styles.container, containerStyle]}>
      {label && (
        <Text style={[
          styles.label,
          { color: isFocused ? '#667eea' : '#a0aec0' }
        ]}>
          {label}
        </Text>
      )}
      <View style={styles.inputContainer}>
        <TextInput
          style={[
            getInputStyle(),
            style,
          ]}
          placeholderTextColor="#4a5568"
          onFocus={handleFocus}
          onBlur={handleBlur}
          {...props}
        />
        {isFocused && variant !== 'minimal' && (
          <LinearGradient
            colors={['rgba(102, 126, 234, 0.2)', 'rgba(118, 75, 162, 0.1)']}
            style={styles.focusGradient}
          />
        )}
      </View>
      {error && <Text style={styles.error}>{error}</Text>}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    marginBottom: 20,
  },
  label: {
    fontSize: 14,
    fontWeight: '600',
    marginBottom: 8,
    textShadowColor: 'rgba(0, 0, 0, 0.3)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 2,
  },
  inputContainer: {
    position: 'relative',
  },
  focusGradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    borderRadius: 16,
    opacity: 0.1,
    pointerEvents: 'none',
  },
  error: {
    fontSize: 12,
    color: '#e53e3e',
    marginTop: 6,
    fontWeight: '500',
  },
});

--- END FILE ---

>>> FILE: components/ui/theme-toggle.tsx (size: 1990 bytes)
--- BEGIN FILE ---
import React from 'react';
import { TouchableOpacity, StyleSheet, Animated } from 'react-native';
import { Sun, Moon } from 'lucide-react-native';
import { useTheme } from '@/hooks/useTheme';

export const ThemeToggle: React.FC = () => {
  const { theme, toggleTheme, colors } = useTheme();
  const animatedValue = React.useRef(new Animated.Value(theme === 'dark' ? 1 : 0)).current;

  React.useEffect(() => {
    Animated.timing(animatedValue, {
      toValue: theme === 'dark' ? 1 : 0,
      duration: 300,
      useNativeDriver: false,
    }).start();
  }, [theme]);

  const backgroundColor = animatedValue.interpolate({
    inputRange: [0, 1],
    outputRange: ['#F1F5F9', '#334155'],
  });

  const translateX = animatedValue.interpolate({
    inputRange: [0, 1],
    outputRange: [2, 22],
  });

  return (
    <TouchableOpacity
      style={[styles.container, { backgroundColor: colors.border }]}
      onPress={toggleTheme}
      activeOpacity={0.8}
    >
      <Animated.View style={[styles.track, { backgroundColor }]}>
        <Animated.View 
          style={[
            styles.thumb, 
            { 
              backgroundColor: colors.background,
              transform: [{ translateX }],
              shadowColor: colors.text,
            }
          ]}
        >
          {theme === 'dark' ? (
            <Moon size={16} color={colors.text} />
          ) : (
            <Sun size={16} color={colors.text} />
          )}
        </Animated.View>
      </Animated.View>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  container: {
    width: 52,
    height: 32,
    borderRadius: 16,
    padding: 2,
  },
  track: {
    flex: 1,
    borderRadius: 14,
    position: 'relative',
  },
  thumb: {
    position: 'absolute',
    width: 28,
    height: 28,
    borderRadius: 14,
    alignItems: 'center',
    justifyContent: 'center',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 4,
  },
});

--- END FILE ---

>>> FILE: package-lock.json (size: 359908 bytes)
--- BEGIN FILE ---
